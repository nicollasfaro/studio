

{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the Thainnes Cuba Ciuldin application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "name": {
          "type": "string",
          "description": "The name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "createdAt": {
          "type": "string",
          "description": "The date and time the user registered.",
          "format": "date-time"
        },
        "isAdmin": {
          "type": "boolean",
          "description": "Flag to indicate if the user is an administrator."
        },
        "photoURL": {
            "type": "string",
            "format": "uri",
            "description": "URL of the user's profile picture."
        },
        "providerId": {
            "type": "string",
            "description": "The authentication provider used (e.g., 'password', 'google.com')."
        },
        "address": {
          "type": "string",
          "description": "The user's street address."
        },
        "city": {
          "type": "string",
          "description": "The user's city."
        },
        "state": {
          "type": "string",
          "description": "The user's state or province."
        },
        "zipCode": {
          "type": "string",
          "description": "The user's postal or zip code."
        },
        "country": {
          "type": "string",
          "description": "The user's country."
        },
        "fcmTokens": {
          "type": "array",
          "description": "An array of Firebase Cloud Messaging tokens for sending push notifications.",
          "items": {
            "type": "string"
          }
        },
        "googleAccessToken": {
          "type": "string",
          "description": "OAuth2 access token for Google API access."
        },
        "googleRefreshToken": {
          "type": "string",
          "description": "OAuth2 refresh token for Google API access."
        }
      },
      "required": ["id", "name", "email", "createdAt"]
    },
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client registered in the Thainnes Cuba Ciuldin application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the client entity."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the client."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the client."
        },
        "email": {
          "type": "string",
          "description": "The email address of the client.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the client."
        },
        "registrationDate": {
          "type": "string",
          "description": "The date and time the client registered.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phone",
        "registrationDate"
      ]
    },
    "Service": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Service",
      "type": "object",
      "description": "Represents a service offered by Thainnes Cuba Ciuldin.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the service entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the service."
        },
        "description": {
          "type": "string",
          "description": "A description of the service."
        },
        "price": {
          "type": "number",
          "description": "The base price of the service. If isPriceFrom is true, this is the starting price."
        },
        "durationMinutes": {
          "type": "number",
          "description": "The duration of the service in minutes."
        },
        "imageId": {
          "type": "string",
          "description": "ID of the service image from the galleryImages collection."
        },
        "isPriceFrom": {
          "type": "boolean",
          "description": "Indicates if the price is a starting price ('a partir de')."
        },
        "priceShortHair": {
          "type": "number",
          "description": "Price for short hair, if applicable."
        },
        "priceMediumHair": {
          "type": "number",
          "description": "Price for medium hair, if applicable."
        },
        "priceLongHair": {
          "type": "number",
          "description": "Price for long hair, if applicable."
        },
        "hasCustomSchedule": {
            "type": "boolean",
            "description": "Flag to indicate if the service has its own schedule."
        },
        "customStartTime": {
            "type": "string",
            "description": "The custom opening time in HH:mm format, if hasCustomSchedule is true."
        },
        "customEndTime": {
            "type": "string",
            "description": "The custom closing time in HH:mm format, if hasCustomSchedule is true."
        },
        "customWorkingDays": {
            "type": "array",
            "description": "An array of numbers representing the custom working days for the service (0=Sunday, ..., 6=Saturday), if hasCustomSchedule is true.",
            "items": {
                "type": "number",
                "minimum": 0,
                "maximum": 6
            }
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "price",
        "durationMinutes",
        "imageId"
      ]
    },
    "Promotion": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Promotion",
      "type": "object",
      "description": "Represents a promotion offered by Thainnes Cuba Ciuldin.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the promotion entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the promotion."
        },
        "description": {
          "type": "string",
          "description": "A description of the promotion."
        },
        "discountPercentage": {
          "type": "number",
          "description": "The discount percentage offered by the promotion."
        },
        "startDate": {
          "type": "string",
          "description": "The start date of the promotion.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "The end date of the promotion.",
          "format": "date-time"
        },
        "serviceIds": {
          "type": "array",
          "description": "References to Services. (Relationship: Promotion N:N Service)",
          "items": {
            "type": "string"
          }
        },
        "imageId": {
          "type": "string",
          "description": "ID of the promotion image from the galleryImages collection."
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "discountPercentage",
        "startDate",
        "endDate",
        "serviceIds",
        "imageId"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents an appointment Marcado by a client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the appointment entity."
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Appointment)"
        },
        "serviceId": {
          "type": "string",
          "description": "Reference to Service. (Relationship: Service 1:N Appointment)"
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the appointment.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the appointment.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the appointment (e.g., Marcado, finalizado, cancelado)."
        },
        "hairLength": {
          "type": "string",
          "enum": ["curto", "medio", "longo"],
          "description": "Selected hair length for variable price services."
        },
        "hairPhotoUrl": {
            "type": "string",
            "contentEncoding": "base64",
            "description": "Base64 encoded Data URI of the uploaded hair reference photo."
        },
        "finalPrice": {
            "type": "number",
            "description": "The final price of the appointment, considering variations."
        },
        "viewedByAdmin": {
            "type": "boolean",
            "description": "Flag to indicate if an admin has viewed the appointment."
        },
        "contestStatus": {
          "type": "string",
          "enum": ["pending", "accepted", "rejected"],
          "description": "Status of a price contestation by the admin."
        },
        "contestReason": {
          "type": "string",
          "description": "The reason provided by the admin for the contestation."
        },
        "contestedHairLength": {
          "type": "string",
          "enum": ["curto", "medio", "longo"],
          "description": "The correct hair length as contested by the admin."
        },
        "contestedPrice": {
          "type": "number",
          "description": "The new price proposed by the admin based on the contested hair length."
        },
        "adminTyping": {
          "type": "boolean",
          "description": "Flag to indicate if the admin is currently typing a message."
        },
        "clientTyping": {
          "type": "boolean",
          "description": "Flag to indicate if the client is currently typing a message."
        },
        "hasUnreadAdminMessage": {
          "type": "boolean",
          "description": "Flag to indicate if there are unread messages for the admin."
        },
        "hasUnreadClientMessage": {
            "type": "boolean",
            "description": "Flag to indicate if there are unread messages for the client."
        }
      },
      "required": [
        "id",
        "clientId",
        "serviceId",
        "startTime",
        "endTime",
        "status"
      ]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a single chat message within an appointment's conversation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the chat message."
        },
        "appointmentId": {
          "type": "string",
          "description": "ID of the appointment this message belongs to."
        },
        "senderId": {
          "type": "string",
          "description": "The UID of the sending user, or 'admin' for an administrator."
        },
        "senderName": {
          "type": "string",
          "description": "The display name of the sender."
        },
        "text": {
          "type": "string",
          "description": "The content of the message."
        },
        "timestamp": {
          "type": "string",
          "description": "The ISO 8601 timestamp of when the message was sent.",
          "format": "date-time"
        },
        "isRead": {
          "type": "boolean",
          "description": "Flag to indicate if the message has been read by the recipient."
        }
      },
      "required": [
        "id",
        "appointmentId",
        "senderId",
        "senderName",
        "text",
        "timestamp"
      ]
    },
    "ThemeSettings": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ThemeSettings",
      "type": "object",
      "description": "Stores the dynamic theme settings for the application.",
      "properties": {
        "primary": {
          "type": "string",
          "description": "The primary color in HSL format (e.g., '271 76% 34%')."
        },
        "secondary": {
          "type": "string",
          "description": "The secondary color in HSL format (e.g., '271 50% 80%')."
        },
        "accent": {
          "type": "string",
          "description": "The accent color in HSL format (e.g., '330 100% 71%')."
        },
        "background": {
          "type": "string",
          "description": "The background color in HSL format (e.g., '240 67% 94%')."
        },
        "foreground": {
          "type": "string",
          "description": "The foreground color (main text) in HSL format."
        },
        "card": {
          "type": "string",
          "description": "The card background color in HSL format."
        },
        "cardForeground": {
          "type": "string",
          "description": "The card foreground color (text) in HSL format."
        }
      },
      "required": ["primary", "secondary", "accent", "background", "foreground", "card", "cardForeground"]
    },
    "SocialMediaLinks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SocialMediaLinks",
      "type": "object",
      "description": "Stores the URLs for the business's social media profiles.",
      "properties": {
        "facebook": {
          "type": "string",
          "format": "uri",
          "description": "URL for the Facebook page."
        },
        "instagram": {
          "type": "string",
          "format": "uri",
          "description": "URL for the Instagram profile."
        },
        "twitter": {
          "type": "string",
          "format": "uri",
          "description": "URL for the Twitter/X profile."
        }
      }
    },
     "NotificationSettings": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NotificationSettings",
      "type": "object",
      "description": "Stores the contact details for sending admin notifications.",
      "properties": {
        "notificationEmail": {
          "type": "string",
          "format": "email",
          "description": "The email address for sending new appointment notifications."
        },
        "notificationWhatsapp": {
          "type": "string",
          "description": "The WhatsApp number (including country code) for sending new appointment notifications."
        }
      }
    },
    "BusinessHours": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BusinessHours",
      "type": "object",
      "description": "Stores the business's opening hours and days of operation.",
      "properties": {
        "startTime": {
          "type": "string",
          "description": "The opening time in HH:mm format (e.g., '09:00')."
        },
        "endTime": {
          "type": "string",
          "description": "The closing time in HH:mm format (e.g., '18:00')."
        },
        "workingDays": {
          "type": "array",
          "description": "An array of numbers representing the days of the week the business is open (0=Sunday, 1=Monday, ..., 6=Saturday).",
          "items": {
            "type": "number",
            "minimum": 0,
            "maximum": 6
          }
        }
      },
      "required": ["startTime", "endTime", "workingDays"]
    },
    "BusinessLocation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BusinessLocation",
      "type": "object",
      "description": "Stores the physical address of the business.",
      "properties": {
        "address": {
          "type": "string",
          "description": "The street address of the business."
        },
        "city": {
          "type": "string",
          "description": "The city where the business is located."
        },
        "state": {
          "type": "string",
          "description": "The state or province of the business."
        },
        "zipCode": {
          "type": "string",
          "description": "The postal or zip code of the business."
        },
        "country": {
          "type": "string",
          "description": "The country of the business."
        }
      },
      "required": ["address", "city", "state", "zipCode", "country"]
    },
    "GalleryImage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GalleryImage",
      "type": "object",
      "description": "Represents an image in the gallery, stored in Firebase Storage.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the image document."
        },
        "imageUrl": {
          "type": "string",
          "format": "uri",
          "description": "The public URL of the image in Firebase Storage."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the image."
        },
        "fileName": {
          "type": "string",
          "description": "The name of the file in Firebase Storage."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the image was uploaded."
        }
      },
      "required": ["id", "imageUrl", "description", "fileName", "createdAt"]
    },
    "HeroBanner": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HeroBanner",
      "type": "object",
      "description": "Stores the content for the home page hero banner.",
      "properties": {
        "imageId": {
          "type": "string",
          "description": "ID of the banner image from the galleryImages collection."
        },
        "largeText": {
          "type": "string",
          "description": "The main headline text."
        },
        "smallText": {
          "type": "string",
          "description": "The sub-headline or description text."
        },
        "buttonText": {
          "type": "string",
          "description": "The text for the call-to-action button."
        }
      },
      "required": ["imageId", "largeText", "smallText", "buttonText"]
    },
    "WhatsAppMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WhatsAppMessage",
      "type": "object",
      "description": "Represents a message to be sent via WhatsApp.",
      "properties": {
        "to": {
          "type": "string",
          "description": "The recipient's WhatsApp number (e.g., 'whatsapp:+14155238886')."
        },
        "from": {
          "type": "string",
          "description": "The sender's WhatsApp number provided by the API (e.g., 'whatsapp:+14155238886')."
        },
        "body": {
          "type": "string",
          "description": "The content of the message."
        }
      },
      "required": ["to", "from", "body"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Users can read/write their own data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user, matching the auth UID."
            }
          ]
        }
      },
      {
        "path": "/services/{serviceId}",
        "definition": {
          "entityName": "Service",
          "schema": {
            "$ref": "#/backend/entities/Service"
          },
          "description": "Stores service data. All users can read service information.",
          "params": [
            {
              "name": "serviceId",
              "description": "The unique identifier of the service."
            }
          ]
        }
      },
      {
        "path": "/promotions/{promotionId}",
        "definition": {
          "entityName": "Promotion",
          "schema": {
            "$ref": "#/backend/entities/Promotion"
          },
          "description": "Stores promotion data. All users can read promotion information.",
          "params": [
            {
              "name": "promotionId",
              "description": "The unique identifier of the promotion."
            }
          ]
        }
      },
      {
        "path": "/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointment data. Clients own their appointments. Admins can manage all appointments.",
          "params": [
            {
              "name": "appointmentId",
              "description": "The unique identifier of the appointment document."
            }
          ],
          "subcollections": [
            {
                "path": "/messages/{messageId}",
                "definition": {
                    "entityName": "ChatMessage",
                    "schema": {
                        "$ref": "#/backend/entities/ChatMessage"
                    },
                    "description": "Stores chat messages for a specific appointment. Readable/writable by the client and admins.",
                    "params": [
                        {
                            "name": "messageId",
                            "description": "The unique identifier for the chat message."
                        }
                    ]
                }
            }
          ]
        }
      },
      {
        "path": "/theme/{themeId}",
        "definition": {
          "entityName": "ThemeSettings",
          "schema": {
            "$ref": "#/backend/entities/ThemeSettings"
          },
          "description": "Stores dynamic theme settings. Publicly readable, admin writable.",
          "params": [
            {
              "name": "themeId",
              "description": "The unique identifier for the theme document, typically 'global'."
            }
          ]
        }
      },
      {
        "path": "/socialMedia/{docId}",
        "definition": {
          "entityName": "SocialMediaLinks",
          "schema": {
            "$ref": "#/backend/entities/SocialMediaLinks"
          },
          "description": "Stores social media links. Publicly readable, admin writable.",
          "params": [
            {
              "name": "docId",
              "description": "The unique identifier for the document, typically 'links'."
            }
          ]
        }
      },
      {
        "path": "/config/{docId}",
        "definition": {
          "entityName": "NotificationSettings",
          "schema": {
            "$ref": "#/backend/entities/NotificationSettings"
          },
          "description": "Stores admin configuration, like notification settings. Admin writable only.",
          "params": [
            {
              "name": "docId",
              "description": "The unique identifier for the configuration document, e.g., 'notifications' or 'businessHours'."
            }
          ]
        }
      },
      {
        "path": "/galleryImages/{imageId}",
        "definition": {
          "entityName": "GalleryImage",
          "schema": {
            "$ref": "#/backend/entities/GalleryImage"
          },
          "description": "Stores metadata for uploaded gallery images. Publicly readable, admin writable.",
          "params": [
            {
              "name": "imageId",
              "description": "The unique identifier for the image metadata document."
            }
          ]
        }
      },
       {
        "path": "/content/{contentId}",
        "definition": {
          "entityName": "HeroBanner",
          "schema": {
            "$ref": "#/backend/entities/HeroBanner"
          },
          "description": "Stores dynamic page content, like the hero banner. Publicly readable, admin writable.",
          "params": [
            {
              "name": "contentId",
              "description": "The unique identifier for the content document, e.g., 'heroBanner'."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support Thainnes Cuba Ciuldin's core features with a focus on security, scalability, and ease of debugging. It follows the principles of Authorization Independence, Structural Segregation, and Access Modeling.  \n\n*   **Users (Private Data with Admin Override):** User data is stored in a top-level `/users/{userId}` collection. This allows users to manage their own profile information while enabling administrators to have oversight.\n*   **Services (Public Data):** Services are stored in a single collection `/services/{serviceId}`. This allows for easy listing and retrieval of all available services.\n*   **Promotions (Public Data with Service References):** Promotions are stored in a single collection `/promotions/{promotionId}`.  Each promotion document contains an array `serviceIds` referencing the services to which the promotion applies.  This allows for easy listing and retrieval of all promotions.\n*   **Appointments (Centralized with Ownership):** Appointments are stored in a single, top-level `/appointments/{appointmentId}` collection. This simplifies queries for administrators who need to view all appointments. Each appointment document contains a `clientId` field to link it to the user who created it, ensuring data ownership can still be enforced in security rules. This is more efficient for admin-level queries than nesting appointments under each user.\n* **Chat Messages (Subcollection):** A new subcollection `/appointments/{appointmentId}/messages/{messageId}` is added to store chat messages related to a specific appointment. This keeps conversations organized and directly tied to their context. Security rules ensure only the appointment's client and admins can access these messages.\n*   **Theme (Public Data, Admin Writable):** Theme settings are stored in a single document `/theme/global` for easy public access, allowing the app to load visual styles dynamically for all users, while write access is restricted to administrators.\n*   **Social Media (Public Data, Admin Writable):** Social media links are stored in a single document `/socialMedia/links` for easy public access, allowing the app to display them in the footer dynamically, while write access is restricted to administrators.\n* **Config (Private, Admin-only & Publicly Readable):** A `/config` collection stores general application settings. The document `/config/notifications` holds the contact details for sending admin alerts and is only readable/writable by admins. The new document `/config/businessHours` will store the business operating hours and will be publicly readable but only admin writable. The new document `/config/location` will store the business address and will be publicly readable but only admin writable.\n* **Gallery Images (Public Data, Admin Writable):** A new top-level collection `/galleryImages/{imageId}` is added to store metadata about uploaded images, such as their Firebase Storage URL and a description. This allows the images to be publicly read by the application for use in services and promotions, while restricting write access to administrators.\n* **Content (Public Data, Admin Writable):** A new `/content` collection is added to store general, dynamic content for the site. The document `/content/heroBanner` holds the data for the home page's main banner, allowing it to be easily edited by an admin.\n\n**Authorization Independence:**\n\n*   Authorization Independence is achieved by avoiding `get()` calls in the security rules where possible. Client data is secured via path-based rules under `/users/{userId}`. Admin access is handled by checking a flag on the user's own document.\n\n**QAPs (Rules are not Filters):**\n\n*   The structure enables secure `list` operations by segregating data based on access requirements. Public data (services, promotions, theme, socialMedia, galleryImages, content) resides in dedicated collections. The centralized `/appointments` collection allows admins to `list` all documents, while individual user queries are filtered by `where('clientId', '==', uid)` on the client-side, which is then enforced by security rules."
  }
}


    