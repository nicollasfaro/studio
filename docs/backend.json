
{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the Thainnes Cuba Ciuldin application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "name": {
          "type": "string",
          "description": "The name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "createdAt": {
          "type": "string",
          "description": "The date and time the user registered.",
          "format": "date-time"
        },
        "isAdmin": {
          "type": "boolean",
          "description": "Flag to indicate if the user is an administrator."
        }
      },
      "required": ["id", "name", "email", "createdAt"]
    },
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client registered in the Thainnes Cuba Ciuldin application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the client entity."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the client."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the client."
        },
        "email": {
          "type": "string",
          "description": "The email address of the client.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the client."
        },
        "registrationDate": {
          "type": "string",
          "description": "The date and time the client registered.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phone",
        "registrationDate"
      ]
    },
    "Service": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Service",
      "type": "object",
      "description": "Represents a service offered by Thainnes Cuba Ciuldin.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the service entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the service."
        },
        "description": {
          "type": "string",
          "description": "A description of the service."
        },
        "price": {
          "type": "number",
          "description": "The price of the service."
        },
        "durationMinutes": {
          "type": "number",
          "description": "The duration of the service in minutes."
        },
        "imageId": {
          "type": "string",
          "description": "ID of the service image from placeholder list."
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "price",
        "durationMinutes",
        "imageId"
      ]
    },
    "Promotion": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Promotion",
      "type": "object",
      "description": "Represents a promotion offered by Thainnes Cuba Ciuldin.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the promotion entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the promotion."
        },
        "description": {
          "type": "string",
          "description": "A description of the promotion."
        },
        "discountPercentage": {
          "type": "number",
          "description": "The discount percentage offered by the promotion."
        },
        "startDate": {
          "type": "string",
          "description": "The start date of the promotion.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "The end date of the promotion.",
          "format": "date-time"
        },
        "serviceIds": {
          "type": "array",
          "description": "References to Services. (Relationship: Promotion N:N Service)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "discountPercentage",
        "startDate",
        "endDate",
        "serviceIds"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents an appointment Marcado by a client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the appointment entity."
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Appointment)"
        },
        "serviceId": {
          "type": "string",
          "description": "Reference to Service. (Relationship: Service 1:N Appointment)"
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the appointment.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the appointment.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the appointment (e.g., Marcado, finalizado, cancelado)."
        }
      },
      "required": [
        "id",
        "clientId",
        "serviceId",
        "startTime",
        "endTime",
        "status"
      ]
    },
    "ThemeSettings": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ThemeSettings",
      "type": "object",
      "description": "Stores the dynamic theme settings for the application.",
      "properties": {
        "primary": {
          "type": "string",
          "description": "The primary color in HSL format (e.g., '271 76% 34%')."
        },
        "secondary": {
          "type": "string",
          "description": "The secondary color in HSL format (e.g., '271 50% 80%')."
        },
        "accent": {
          "type": "string",
          "description": "The accent color in HSL format (e.g., '330 100% 71%')."
        },
        "background": {
          "type": "string",
          "description": "The background color in HSL format (e.g., '240 67% 94%')."
        }
      },
      "required": ["primary", "secondary", "accent", "background"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
       {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Users can read/write their own data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user, matching the auth UID."
            }
          ]
        }
      },
      {
        "path": "/services/{serviceId}",
        "definition": {
          "entityName": "Service",
          "schema": {
            "$ref": "#/backend/entities/Service"
          },
          "description": "Stores service data. All users can read service information.",
          "params": [
            {
              "name": "serviceId",
              "description": "The unique identifier of the service."
            }
          ]
        }
      },
      {
        "path": "/promotions/{promotionId}",
        "definition": {
          "entityName": "Promotion",
          "schema": {
            "$ref": "#/backend/entities/Promotion"
          },
          "description": "Stores promotion data. All users can read promotion information.",
          "params": [
            {
              "name": "promotionId",
              "description": "The unique identifier of the promotion."
            }
          ]
        }
      },
      {
        "path": "/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointment data. Clients own their appointments. Admins can manage all appointments.",
          "params": [
            {
              "name": "appointmentId",
              "description": "The unique identifier of the appointment document."
            }
          ]
        }
      },
      {
        "path": "/theme/{themeId}",
        "definition": {
          "entityName": "ThemeSettings",
          "schema": {
            "$ref": "#/backend/entities/ThemeSettings"
          },
          "description": "Stores dynamic theme settings. Publicly readable, admin writable.",
          "params": [
            {
              "name": "themeId",
              "description": "The unique identifier for the theme document, typically 'global'."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support Thainnes Cuba Ciuldin's core features with a focus on security, scalability, and ease of debugging. It follows the principles of Authorization Independence, Structural Segregation, and Access Modeling.  \n\n*   **Users (Private Data with Admin Override):** User data is stored in a top-level `/users/{userId}` collection. This allows users to manage their own profile information while enabling administrators to have oversight.\n*   **Services (Public Data):** Services are stored in a single collection `/services/{serviceId}`. This allows for easy listing and retrieval of all available services.\n*   **Promotions (Public Data with Service References):** Promotions are stored in a single collection `/promotions/{promotionId}`.  Each promotion document contains an array `serviceIds` referencing the services to which the promotion applies.  This allows for easy listing and retrieval of all promotions.\n*   **Appointments (Centralized with Ownership):** Appointments are stored in a single, top-level `/appointments/{appointmentId}` collection. This simplifies queries for administrators who need to view all appointments. Each appointment document contains a `clientId` field to link it to the user who created it, ensuring data ownership can still be enforced in security rules. This is more efficient for admin-level queries than nesting appointments under each user.\n*   **Theme (Public Data, Admin Writable):** Theme settings are stored in a single document `/theme/global` for easy public access, allowing the app to load visual styles dynamically for all users, while write access is restricted to administrators.\n\n**Authorization Independence:**\n\n*   Authorization Independence is achieved by avoiding `get()` calls in the security rules where possible. Client data is secured via path-based rules under `/users/{userId}`. Admin access is handled by checking a flag on the user's own document.\n\n**QAPs (Rules are not Filters):**\n\n*   The structure enables secure `list` operations by segregating data based on access requirements. Public data (services, promotions, theme) resides in dedicated collections. The centralized `/appointments` collection allows admins to `list` all documents, while individual user queries are filtered by `where('clientId', '==', uid)` on the client-side, which is then enforced by security rules."
  }
}
