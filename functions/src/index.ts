
import * as functions from "firebase-functions";
import * as admin from "firebase-admin";

// Inicializa o Firebase Admin SDK.
// A fun√ß√£o ir√° autenticar-se automaticamente no ambiente do Firebase.
admin.initializeApp();

/**
 * Cloud Function que √© acionada na cria√ß√£o de um novo documento de promo√ß√£o.
 * Ela envia uma notifica√ß√£o push para todos os usu√°rios que se inscreveram.
 */
export const sendPromotionNotification = functions.firestore
  .document("promotions/{promotionId}")
  .onCreate(async (snapshot) => {
    // Pega os dados da nova promo√ß√£o.
    const promotionData = snapshot.data();

    if (!promotionData) {
      console.log("Nenhum dado na promo√ß√£o, encerrando a fun√ß√£o.");
      return null;
    }

    const {name, description} = promotionData;

    console.log(`Nova promo√ß√£o: "${name}". Enviando notifica√ß√µes.`);

    // 1. Buscar todos os usu√°rios do Firestore.
    const usersSnapshot = await admin.firestore().collection("users").get();

    // 2. Coletar todos os tokens de notifica√ß√£o (FCM tokens).
    const tokens: string[] = [];
    usersSnapshot.forEach((userDoc) => {
      const userData = userDoc.data();
      // Verifica se o usu√°rio tem tokens salvos e se √© um array.
      if (userData.fcmTokens && Array.isArray(userData.fcmTokens)) {
        tokens.push(...userData.fcmTokens);
      }
    });

    if (tokens.length === 0) {
      console.log("Nenhum usu√°rio inscrito para receber notifica√ß√µes.");
      return null;
    }

    console.log(`Encontrados ${tokens.length} tokens para notificar.`);

    // 3. Montar a mensagem da notifica√ß√£o.
    const payload: admin.messaging.MessagingPayload = {
      notification: {
        title: `üéâ Nova Promo√ß√£o: ${name}!`,
        body: description,
        icon: "/icons/icon-192x192.png",
        click_action: "/promotions",
      },
    };

    // 4. Enviar a notifica√ß√£o para todos os tokens.
    try {
      const response = await admin.messaging().sendToDevice(tokens, payload);
      console.log("Notifica√ß√µes enviadas com sucesso:", response);

      // Opcional: Limpar tokens inv√°lidos do banco de dados.
      response.results.forEach((result, index) => {
        const error = result.error;
        if (error) {
          console.error("Falha ao enviar para token:", tokens[index], error);
          // Se o erro for 'unregistered', o token √© inv√°lido.
          if (
            error.code === "messaging/invalid-registration-token" ||
            error.code === "messaging/registration-token-not-registered"
          ) {
            // L√≥gica para remover o token inv√°lido do usu√°rio (avan√ßado).
          }
        }
      });
    } catch (error) {
      console.error("Erro ao enviar notifica√ß√µes:", error);
    }

    return null;
  });
