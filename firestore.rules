/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data (clients, appointments)
 * and allows public read access to shared data (services, promotions).
 * Users can only manage their own profiles. Administrative privileges are not yet fully implemented.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/clients/{clientId}: Client data, owned by the user.
 * - /services/{serviceId}: Service catalog, publicly readable.
 * - /promotions/{promotionId}: Promotion data, publicly readable.
 * - /users/{userId}/appointments/{appointmentId}: Appointment data, owned by the user.
 *
 * Key Security Decisions:
 * - User listing is currently denied to prevent information disclosure.
 * - All write operations are explicitly authorized to prevent accidental open access.
 * - Data validation is limited to ownership checks and relational integrity in this prototype.
 * - Admin privileges are not implemented for write access
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, list, update, delete) User can only access their own profile.
     * @deny (create) User cannot create a profile with a different UID.
     * @deny (update, delete) User cannot modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && resource != null && request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing explicitly disabled for privacy.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects client data nested under a user's profile.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create, get, list, update, delete) User can only access their own client data.
     * @deny (create, get, list, update, delete) User cannot access another user's client data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isSignedIn() && resource != null && request.auth.uid == userId;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to service data.
     * @path /services/{serviceId}
     * @allow (get, list) All users can read service information.
     * @deny (create, update, delete) Only admins can modify service information.
     * @principle Allows public read access with restricted writes.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to promotion data.
     * @path /promotions/{promotionId}
     * @allow (get, list) All users can read promotion information.
     * @deny (create, update, delete) Only admins can modify promotion information.
     * @principle Allows public read access with restricted writes.
     */
    match /promotions/{promotionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects appointment data nested under a user's profile.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create, get, list, update, delete) User can only access their own appointment data.
     * @deny (create, get, list, update, delete) User cannot access another user's appointment data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isSignedIn() && resource != null && request.auth.uid == userId;
        }

        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}