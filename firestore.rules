/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for private data and allows public read access for shared data like services and promotions. User-specific data is nested under `/users/{userId}` to ensure data isolation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own data. Listing all users is disallowed.
 * - /users/{userId}/clients/{clientId}: Stores client data. Only the associated user can manage their clients.
 * - /services/{serviceId}: Stores service information. Publicly readable.
 * - /promotions/{promotionId}: Stores promotion information. Publicly readable.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment data. Only the associated user can manage their appointments.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Listing all users is disallowed unless the request is performed by an admin.
 * - Services and Promotions are publicly readable but require server-side logic for modification (not covered by these rules).
 * - Data validation is relaxed in this prototyping phase but includes basic checks to prevent relational inconsistencies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner (matches the UID).
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures client data for a specific user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, create, update, delete, list) if the user is the owner (matches the UID).
     * @deny (get, create, update, delete, list) if the user is not the owner.
     * @principle Enforces document ownership and prevents unauthorized access to client data.
     */
    match /users/{userId}/clients/{clientId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isSignedIn() && request.auth.uid == userId;
        allow update: if isOwner(userId) && resource != null;
        allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to service data.
     * @path /services/{serviceId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Enables public listing and retrieval of service information while preventing unauthorized modifications.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to promotion data.
     * @path /promotions/{promotionId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Enables public listing and retrieval of promotion information while preventing unauthorized modifications.
     */
    match /promotions/{promotionId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures appointment data for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (get, create, update, delete, list) if the user is the owner (matches the UID).
     * @deny (get, create, update, delete, list) if the user is not the owner.
     * @principle Enforces document ownership and prevents unauthorized access to appointment data.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}