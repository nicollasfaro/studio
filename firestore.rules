/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for private data and allows public read access to shared data like services and promotions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/clients/{clientId}: Stores client data, accessible only to the user (owner).
 * - /services/{serviceId}: Stores service information, publicly readable.
 * - /promotions/{promotionId}: Stores promotion information, publicly readable.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment data, accessible only to the user (owner).
 *
 * Key Security Decisions:
 * - Users can only access their own data under the /users/{userId} path.
 * - Listing all users is disallowed to prevent information disclosure.
 * - Public collections (/services, /promotions) are readable by anyone.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile information.
     * @path /users/{userId}
     * @allow (get, update, delete) User 'giGWF3P9E6he2DctYPXrY9Tkqpi1' can access their own profile
     * @allow (create) User 'giGWF3P9E6he2DctYPXrY9Tkqpi1' can create their profile if the userId matches their auth UID.
     * @deny (get, update, delete) User 'otherUserId' cannot access user 'giGWF3P9E6he2DctYPXrY9Tkqpi1' profile.
     * @deny (create) User 'otherUserId' cannot create user 'giGWF3P9E6he2DctYPXrY9Tkqpi1' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores client data. Only the authenticated user (userId) can access their own data.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get, list, create, update, delete) User 'giGWF3P9E6he2DctYPXrY9Tkqpi1' can access their own clients.
     * @deny (get, list, create, update, delete) User 'otherUserId' cannot access user 'giGWF3P9E6he2DctYPXrY9Tkqpi1' clients.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores service data. All users can read service information.
     * @path /services/{serviceId}
     * @allow (get, list) Any user can read service data.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete service data.
     * @principle Allows public read access with restricted writes.
     */
    match /services/{serviceId} {
        allow get, list: if true;
        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Stores promotion data. All users can read promotion information.
     * @path /promotions/{promotionId}
     * @allow (get, list) Any user can read promotion data.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete promotion data.
     * @principle Allows public read access with restricted writes.
     */
    match /promotions/{promotionId} {
        allow get, list: if true;
        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Stores appointment data for a specific user. Only the authenticated user (userId) can access their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (get, list, create, update, delete) User 'giGWF3P9E6he2DctYPXrY9Tkqpi1' can access their own appointments.
     * @deny (get, list, create, update, delete) User 'otherUserId' cannot access user 'giGWF3P9E6he2DctYPXrY9Tkqpi1' appointments.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}