/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client and appointment data,
 * while allowing public read access to service and promotion information.
 *
 * Data Structure:
 * - Client data is nested under `/users/{userId}/clients/{clientId}`.
 * - Appointment data is nested under `/users/{userId}/appointments/{appointmentId}`.
 * - Service data resides in the top-level `/services/{serviceId}` collection.
 * - Promotion data resides in the top-level `/promotions/{promotionId}` collection.
 *
 * Key Security Decisions:
 * - Users can only access their own client and appointment data.
 * - Service and promotion data is publicly readable.
 * - Data validation is relaxed to allow for rapid prototyping, focusing only on
 *   ownership and relational integrity checks.
 * - Denormalization is not needed in this version because there is no need for checking if a `Promotion` applies to a `Service` for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures client data, ensuring only the owner can read and write.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User 'user123' can create a client document with clientId matching the userId.
     * @allow (get, list, update, delete) User 'user123' can read, update, and delete their own client document.
     * @deny (create) User 'user456' cannot create a client document under 'user123'.
     * @deny (get, list, update, delete) User 'user456' cannot read, update, or delete client documents belonging to 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      // Helper function to check if the request is made by the owner of the user ID
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the request is made by an existing owner of the user ID
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to service data.
     * @path /services/{serviceId}
     * @allow (get, list) Any user can read service documents.
     * @deny (create, update, delete) No one can create, update, or delete service documents (for now).
     * @principle Allows public reads, restricts writes.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to promotion data.
     * @path /promotions/{promotionId}
     * @allow (get, list) Any user can read promotion documents.
     * @deny (create, update, delete) No one can create, update, or delete promotion documents (for now).
     * @principle Allows public reads, restricts writes.
     */
    match /promotions/{promotionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures appointment data, ensuring only the owner can read and write.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User 'user123' can create an appointment document under their user ID.
     * @allow (get, list, update, delete) User 'user123' can read, update, and delete their own appointment documents.
     * @deny (create) User 'user456' cannot create an appointment document under 'user123'.
     * @deny (get, list, update, delete) User 'user456' cannot read, update, or delete appointment documents belonging to 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      // Helper function to check if the request is made by the owner of the user ID
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the request is made by an existing owner of the user ID
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}