rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, allowing users to read/write their own data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching UID can access their own profile. (get, update, delete)
     * @allow (create) User can create their profile if the UID matches. (create)
     * @deny (get, update, delete) User cannot access another user's profile. (get, update, delete)
     * @deny (list) Listing all users is prohibited. (list)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures client data, ensuring only the owning user can access it.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create, get, list, update, delete) User with matching userId can manage their own clients. (create, get, list, update, delete)
     * @deny (create, get, list, update, delete) User cannot access another user's clients. (create, get, list, update, delete)
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to service information.
     * @path /services/{serviceId}
     * @allow (get, list) Any user can read service information. (get, list)
     * @deny (create, update, delete) Only authenticated users can create, update, or delete services. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Grants public read access while restricting write access.
     */
    match /services/{serviceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to promotion information.
     * @path /promotions/{promotionId}
     * @allow (get, list) Any user can read promotion information. (get, list)
     * @deny (create, update, delete) Only authenticated users can create, update, or delete promotions. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Grants public read access while restricting write access.
     */
    match /promotions/{promotionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secures appointment data, ensuring only the owning user can access it.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create, get, list, update, delete) User with matching userId can manage their own appointments. (create, get, list, update, delete)
     * @deny (create, get, list, update, delete) User cannot access another user's appointments. (create, get, list, update, delete)
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}