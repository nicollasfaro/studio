/**
 * @file Firestore Security Rules for GlamEase
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client and appointment data,
 * while allowing public read access to service and promotion information.
 *
 * Data Structure:
 * - /users/{userId}/clients/{clientId}: Client data, accessible only by the owning user.
 * - /services/{serviceId}: Public service data, readable by all users.
 * - /promotions/{promotionId}: Public promotion data, readable by all users.
 * - /users/{userId}/appointments/{appointmentId}: Appointment data, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - Users cannot list all users.
 * - Read-only collections: /services and /promotions are publicly readable.
 *
 * Denormalization for Authorization:
 *  - The current data structure uses path-based ownership for `/users/{userId}/clients/{clientId}`
 *    and `/users/{userId}/appointments/{appointmentId}`, avoiding the need for `get()` calls
 *    to verify ownership.
 *
 * Structural Segregation:
 *  - Public data (services, promotions) is stored in top-level collections, while private user
 *    data (clients, appointments) is stored under user-specific subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     *              It verifies both that the user is signed in and that the document exists.
     * @param {string} userId The user ID of the document's owner.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for the /users collection. Listing all users is forbidden.
     * @path /users
     * @allow (list) Signed-in user attempts to list all users.
     * @deny (list) Signed-in user attempts to list all users.
     * @principle Prevents unauthorized listing of user documents.
     */
    match /users {
      // Prevent listing all users
      allow list: if false;
    }

    /**
     * @description Manages access to client documents for a specific user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User "user123" creates a new client with clientId matching the path.
     * @allow (get) User "user123" retrieves client data for "client456".
     * @allow (list) User "user123" lists their clients.
     * @allow (update) User "user123" updates client data for "client456".
     * @allow (delete) User "user123" deletes client "client456".
     * @deny (create) User "user456" attempts to create a client under "user123" path.
     * @deny (get) User "user456" attempts to retrieve client data for "user123".
     * @deny (list) User "user456" attempts to list clients for "user123".
     * @deny (update) User "user456" attempts to update client data for "user123".
     * @deny (delete) User "user456" attempts to delete client "client456" under "user123" path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      // Only the authenticated user can create a client document under their own user ID.
      allow create: if isOwner(userId) && request.resource.data.id == clientId;

      // Only the authenticated user can get their own client document.
      allow get: if isOwner(userId);

      // Only the authenticated user can list their own client documents.
      allow list: if isOwner(userId);

      // Only the authenticated user can update their own client document.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Only the authenticated user can delete their own client document.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to service documents.
     * @path /services/{serviceId}
     * @allow (get) Any user can retrieve service data for "service123".
     * @allow (list) Any user can list all services.
     * @deny (create) Any user attempts to create a new service.
     * @deny (update) Any user attempts to update service data for "service123".
     * @deny (delete) Any user attempts to delete "service123".
     * @principle Allows public read access but restricts write access.
     */
    match /services/{serviceId} {
      // Anyone can read service documents.
      allow get, list: if true;

      // No one can create, update, or delete service documents.
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to promotion documents.
     * @path /promotions/{promotionId}
     * @allow (get) Any user can retrieve promotion data for "promotion123".
     * @allow (list) Any user can list all promotions.
     * @deny (create) Any user attempts to create a new promotion.
     * @deny (update) Any user attempts to update promotion data for "promotion123".
     * @deny (delete) Any user attempts to delete "promotion123".
     * @principle Allows public read access but restricts write access.
     */
    match /promotions/{promotionId} {
      // Anyone can read promotion documents.
      allow get, list: if true;

      // No one can create, update, or delete promotion documents.
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to appointment documents for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User "user123" creates a new appointment with appointmentId matching the path.
     * @allow (get) User "user123" retrieves appointment data for "appointment456".
     * @allow (list) User "user123" lists their appointments.
     * @allow (update) User "user123" updates appointment data for "appointment456".
     * @allow (delete) User "user123" deletes appointment "appointment456".
     * @deny (create) User "user456" attempts to create an appointment under "user123" path.
     * @deny (get) User "user456" attempts to retrieve appointment data for "user123".
     * @deny (list) User "user456" attempts to list appointments for "user123".
     * @deny (update) User "user456" attempts to update appointment data for "user123".
     * @deny (delete) User "user456" attempts to delete appointment "appointment456" under "user123" path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      // Only the authenticated user can create an appointment document under their own user ID.
      allow create: if isOwner(userId) && request.resource.data.id == appointmentId;

      // Only the authenticated user can get their own appointment document.
      allow get: if isOwner(userId);

      // Only the authenticated user can list their own appointment documents.
      allow list: if isOwner(userId);

      // Only the authenticated user can update their own appointment document.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Only the authenticated user can delete their own appointment document.
      allow delete: if isExistingOwner(userId);
    }
  }
}