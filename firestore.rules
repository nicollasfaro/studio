/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (users, clients, appointments) while allowing public read access to shared data (services, promotions).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user and admins can read/write.
 * - /users/{userId}/clients/{clientId}: Stores client data for a user. Only the user can read/write.
 * - /services/{serviceId}: Stores service data. Publicly readable.
 * - /promotions/{promotionId}: Stores promotion data. Publicly readable.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment data for a user. Only the user can read/write.
 *
 * Key Security Decisions:
 * - Users can only create/update/delete their own data under /users/{userId}.
 * - Clients and appointments are strictly owned by the user; no shared access.
 * - Services and promotions are publicly readable but not writable via client-side rules.
 * - Listing of the `/users` collection is denied to prevent information disclosure.
 *
 * Denormalization for Authorization:
 * - The `isAdmin` flag on the `User` document allows for efficient admin-based authorization without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching auth UID can create their profile.
     * @allow (get, update, delete) User can only access their own profile. Admin users can also access any user's profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their auth UID.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership for writes and admin override for reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource.data.id == userId;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource.data.id == userId;
    }

    /**
     * @description Controls access to client data for a specific user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User can create client data under their own user ID.
     * @allow (get, update, delete) User can only access client data under their own user ID.
     * @deny (create) User cannot create client data under another user's ID.
     * @deny (list) User can list the client documents.
     * @principle Enforces strict user-ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to service data.
     * @path /services/{serviceId}
     * @allow (get, list) All users can read service information.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Allows public read access to service data.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to promotion data.
     * @path /promotions/{promotionId}
     * @allow (get, list) All users can read promotion information.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Allows public read access to promotion data.
     */
    match /promotions/{promotionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to appointment data for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User can create appointment data under their own user ID.
     * @allow (get, update, delete) User can only access appointment data under their own user ID.
     * @deny (create) User cannot create appointment data under another user's ID.
     * @deny (list) User can list the appointment documents.
     * @principle Enforces strict user-ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}