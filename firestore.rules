rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // üîê Fun√ß√µes auxiliares globais
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // ‚úÖ Checa se o usu√°rio logado √© admin via campo `isAdmin` no doc dele
    function isAdmin() {
      return request.auth.uid != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * Users - perfis de usu√°rio
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isAdmin(); // s√≥ admin pode listar todos os users
      allow create: if isSignedIn() && request.auth.uid == userId;

      // usu√°rio s√≥ pode atualizar o pr√≥prio doc se n√£o mexer no campo isAdmin
      allow update: if (isSignedIn() && isOwner(userId) 
                          && request.resource.data.isAdmin == resource.data.isAdmin)
                    || isAdmin();

      allow delete: if (isSignedIn() && isOwner(userId)) || isAdmin();
    }

    /**
     * Clients - subcole√ß√£o de cada user
     */
    match /users/{userId}/clients/{clientId} {
      allow get, list, create, update, delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * Services - leitura p√∫blica, escrita s√≥ admin
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * Promotions - leitura p√∫blica, escrita s√≥ admin
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * Appointments - subcole√ß√£o de cada user
     */
    match /users/{userId}/appointments/{appointmentId} {
  // donos s√≥ conseguem ver os pr√≥prios
  allow get, list, create: if isSignedIn() && isOwner(userId);
  allow update, delete: if isExistingOwner(userId);

  // admins conseguem tudo em qualquer appointment
  allow get, list, create, update, delete: if isAdmin();
}
  }
}
