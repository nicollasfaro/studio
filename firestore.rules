/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for personal data (users, clients, appointments)
 * and allows public read access to shared data (services, promotions).  Admin override is not yet implemented.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/clients/{clientId}: Stores client data, accessible only to the associated user.
 * - /services/{serviceId}: Stores service data, publicly readable.
 * - /promotions/{promotionId}: Stores promotion data, publicly readable.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment data, accessible only to the associated user.
 *
 * Key Security Decisions:
 * - User listing is denied to prevent unauthorized enumeration of user accounts.
 * - Write operations on public collections (services, promotions) are disabled.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization: N/A in this version.  Future iterations may denormalize
 * admin status onto secured documents to avoid `get()` calls.
 *
 * Structural Segregation: Private user data (clients, appointments) is stored under the /users/{userId}
 * path to leverage path-based authorization. Public data (services, promotions) is stored in top-level collections
 * to allow for simple public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure the /users/{userId} collection.  Users can only read/write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with id 'user123' creates their own profile.
     * @allow (get) User with id 'user123' reads their own profile.
     * @allow (update) User with id 'user123' updates their own profile.
     * @allow (delete) User with id 'user123' deletes their own profile.
     * @deny (create) User with id 'user123' attempts to create a profile for 'user456'.
     * @principle Enforces document ownership for all operations.  Validates user ID consistency on create.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent user enumeration

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Secure the /users/{userId}/clients/{clientId} collection. Only the authenticated user (userId) can access their own client data.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User with id 'user123' creates a client document under their user path.
     * @allow (get) User with id 'user123' reads a client document under their user path.
     * @allow (update) User with id 'user123' updates a client document under their user path.
     * @allow (delete) User with id 'user123' deletes a client document under their user path.
     * @deny (create) User with id 'user123' attempts to create a client document under the path of 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Secure the /services/{serviceId} collection. All users can read service information. Write operations are not allowed.
     * @path /services/{serviceId}
     * @allow (get) Any user can retrieve a service document.
     * @allow (list) Any user can list all service documents.
     * @deny (create) No one can create a service document.
     * @deny (update) No one can update a service document.
     * @deny (delete) No one can delete a service document.
     * @principle Allows public read access to all service documents; restricts all write access.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure the /promotions/{promotionId} collection. All users can read promotion information.  Write operations are not allowed.
     * @path /promotions/{promotionId}
     * @allow (get) Any user can retrieve a promotion document.
     * @allow (list) Any user can list all promotion documents.
     * @deny (create) No one can create a promotion document.
     * @deny (update) No one can update a promotion document.
     * @deny (delete) No one can delete a promotion document.
     * @principle Allows public read access to all promotion documents; restricts all write access.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure the /users/{userId}/appointments/{appointmentId} collection. Only the authenticated user (userId) can access their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User with id 'user123' creates an appointment document under their user path.
     * @allow (get) User with id 'user123' reads an appointment document under their user path.
     * @allow (update) User with id 'user123' updates an appointment document under their user path.
     * @allow (delete) User with id 'user123' deletes an appointment document under their user path.
     * @deny (create) User with id 'user123' attempts to create an appointment document under the path of 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}