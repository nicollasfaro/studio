rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User cDJPybaE6wSro5BngjVBHUAuFqJ3 can access their own profile.
     * @allow (create) User cDJPybaE6wSro5BngjVBHUAuFqJ3 can create their own profile.
     * @deny (get, update, delete) User anotherUser cannot access user cDJPybaE6wSro5BngjVBHUAuFqJ3 profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to service data.
     * @path /services/{serviceId}
     * @allow (get, list) Any user can read service information.
     * @deny (create, update, delete) No user can create, update, or delete service data.
     * @principle Provides public read access to service information.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to promotion data.
     * @path /promotions/{promotionId}
     * @allow (get, list) Any user can read promotion information.
     * @deny (create, update, delete) No user can create, update, or delete promotion data.
     * @principle Provides public read access to promotion information.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to appointment data to the owning client and admins.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Clients can only access to their own appointments.
     * @deny (create, update, delete) Only the client that owns the appointments can modify them.
     * @principle Enforces document ownership for appointments.
     */
    match /appointments/{appointmentId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.clientId;
      }
      allow get: if isOwner();
      allow list: if false;

      allow create: if request.auth != null && request.auth.uid == request.resource.data.clientId;
      allow update: if request.auth != null && request.auth.uid == resource.data.clientId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.clientId;
    }
  }
}