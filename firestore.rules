/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for private data and allows public read access to shared data. User documents and their subcollections (clients, appointments) are strictly controlled by the authenticated user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /users/{userId}/clients/{clientId}: Stores client data, accessible only to the owning user.
 * - /services/{serviceId}: Stores service data, publicly readable.
 * - /promotions/{promotionId}: Stores promotion data, publicly readable.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment data, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Users can only list their own documents under their user ID.
 * - Clients and Appointments are secured via path-based ownership under each user.
 * - Services and Promotions are publicly readable.
 * - The rules do NOT enforce the schema; they focus on authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile, matching the userId to auth.uid.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Non-authenticated user cannot create a user profile.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to client data for a specific user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get) Authenticated user can read their own client data.
     * @allow (create) Authenticated user can create client data under their user ID.
     * @allow (update) Authenticated user can update their own client data.
     * @allow (delete) Authenticated user can delete their own client data.
     * @deny (get) Authenticated user cannot read another user's client data.
     * @deny (create) Authenticated user cannot create client data under another user's ID.
     * @deny (update) Authenticated user cannot update another user's client data.
     * @deny (delete) Authenticated user cannot delete another user's client data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to service data. All users can read service information.
     * @path /services/{serviceId}
     * @allow (get) All users can read service data.
     * @allow (list) All users can list service data.
     * @deny (create) No user can create service data.
     * @deny (update) No user can update service data.
     * @deny (delete) No user can delete service data.
     * @principle Allows public read access to service data.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to promotion data. All users can read promotion information.
     * @path /promotions/{promotionId}
     * @allow (get) All users can read promotion data.
     * @allow (list) All users can list promotion data.
     * @deny (create) No user can create promotion data.
     * @deny (update) No user can update promotion data.
     * @deny (delete) No user can delete promotion data.
     * @principle Allows public read access to promotion data.
     */
    match /promotions/{promotionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to appointment data for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (get) Authenticated user can read their own appointment data.
     * @allow (create) Authenticated user can create appointment data under their user ID.
     * @allow (update) Authenticated user can update their own appointment data.
     * @allow (delete) Authenticated user can delete their own appointment data.
     * @deny (get) Authenticated user cannot read another user's appointment data.
     * @deny (create) Authenticated user cannot create appointment data under another user's ID.
     * @deny (update) Authenticated user cannot update another user's appointment data.
     * @deny (delete) Authenticated user cannot delete another user's appointment data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}