/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client and appointment data,
 * while allowing public read access to service and promotion information.
 *
 * Data Structure:
 * - /users/{userId}/clients/{clientId}:  Client data, owned by the user with ID userId.
 * - /services/{serviceId}: Public service data.
 * - /promotions/{promotionId}: Public promotion data.
 * - /users/{userId}/appointments/{appointmentId}: Appointment data, owned by the user with ID userId.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public read access is granted for services and promotions to facilitate discovery.
 * - All write operations are strictly controlled based on ownership or the absence of a defined ownership field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Rule set for documents under /users/{userId}/clients/{clientId}.
     * @path /users/{userId}/clients/{clientId}
     * @allow (get) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can read their own client data.
     * @allow (create) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can create a client document with clientId = 'testClientId'.
     * @allow (update) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can update their own client data (clientId = 'testClientId').
     * @allow (delete) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can delete their own client data (clientId = 'testClientId').
     * @deny (get) User 'anotherUserId' cannot read client data belonging to 'OpjV2mjea2VdhbQ62gN1afDFvv02'.
     * @deny (create) User 'anotherUserId' cannot create client data under '/users/OpjV2mjea2VdhbQ62gN1afDFvv02/clients/testClientId'.
     * @deny (update) User 'anotherUserId' cannot update client data belonging to 'OpjV2mjea2VdhbQ62gN1afDFvv02'.
     * @deny (delete) User 'anotherUserId' cannot delete client data belonging to 'OpjV2mjea2VdhbQ62gN1afDFvv02'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rule set for documents under /services/{serviceId}.
     * @path /services/{serviceId}
     * @allow (get) Any user can read service data.
     * @allow (list) Any user can list service data.
     * @deny (create) No user can create service data through client side.
     * @deny (update) No user can update service data through client side.
     * @deny (delete) No user can delete service data through client side.
     * @principle Allows public read access to service information, but restricts all write access.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule set for documents under /promotions/{promotionId}.
     * @path /promotions/{promotionId}
     * @allow (get) Any user can read promotion data.
     * @allow (list) Any user can list promotion data.
     * @deny (create) No user can create promotion data through client side.
     * @deny (update) No user can update promotion data through client side.
     * @deny (delete) No user can delete promotion data through client side.
     * @principle Allows public read access to promotion information, but restricts all write access.
     */
    match /promotions/{promotionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule set for documents under /users/{userId}/appointments/{appointmentId}.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (get) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can read their own appointment data.
     * @allow (create) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can create an appointment document with appointmentId = 'testAppointmentId'.
     * @allow (update) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can update their own appointment data (appointmentId = 'testAppointmentId').
     * @allow (delete) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can delete their own appointment data (appointmentId = 'testAppointmentId').
     * @deny (get) User 'anotherUserId' cannot read appointment data belonging to 'OpjV2mjea2VdhbQ62gN1afDFvv02'.
     * @deny (create) User 'anotherUserId' cannot create appointment data under '/users/OpjV2mjea2VdhbQ62gN1afDFvv02/appointments/testAppointmentId'.
     * @deny (update) User 'anotherUserId' cannot update appointment data belonging to 'OpjV2mjea2VdhbQ62gN1afDFvv02'.
     * @deny (delete) User 'anotherUserId' cannot delete appointment data belonging to 'OpjV2mjea2VdhbQ62gN1afDFvv02'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}