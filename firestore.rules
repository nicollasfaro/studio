/**
 * @fileOverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read with owner-write patterns, with administrative overrides where appropriate.  It prioritizes security by default, restricting access unless explicitly granted.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user and admins.
 * - /services/{serviceId}: Publicly readable service information.
 * - /promotions/{promotionId}: Publicly readable promotion information.
 * - /appointments/{appointmentId}: Appointments, with access controlled by user ownership (clientId) or admin status.
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Listing user documents is disallowed.
 * - Services and Promotions are publicly readable.
 * - Appointments are accessible to their owners and admins.
 * - Data validation is minimized for prototyping, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - Appointments store the clientId directly, enabling rules to enforce ownership without additional reads.
 *
 * Structural Segregation:
 * - Publicly readable data (Services, Promotions) are stored in top-level collections to avoid the need for complex filtering in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile information. Only the user and admins can read/write their own data.
     * @path /users/{userId}
     * @allow (read, write) User with matching UID (giGWF3P9E6he2DctYPXrY9Tkqpi1).
     * @deny (read, write) User with mismatched UID (not giGWF3P9E6he2DctYPXrY9Tkqpi1).
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      //function
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      //READS
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;

      //WRITES
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource.data.id == userId;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource.data.id == userId;
    }

    /**
     * @description Allows any user to read service information.
     * @path /services/{serviceId}
     * @allow (get, list) Any user (giGWF3P9E6he2DctYPXrY9Tkqpi1).
     * @deny (create, update, delete) Any user (giGWF3P9E6he2DctYPXrY9Tkqpi1).
     * @principle Allows public read access while restricting write access.
     */
    match /services/{serviceId} {
      //READS
      allow get, list: if true;

      //WRITES
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any user to read promotion information.
     * @path /promotions/{promotionId}
     * @allow (get, list) Any user (giGWF3P9E6he2DctYPXrY9Tkqpi1).
     * @deny (create, update, delete) Any user (giGWF3P9E6he2DctYPXrY9Tkqpi1).
     * @principle Allows public read access while restricting write access.
     */
    match /promotions/{promotionId} {
      //READS
      allow get, list: if true;

      //WRITES
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to appointment data. Clients own their appointments, and admins can manage all appointments.
     * @path /appointments/{appointmentId}
     * @allow (get, list) Owner of the appointment (clientId) or Admin user.
     * @allow (create) Owner of the appointment, ensures clientID is set correctly.
     * @allow (update, delete) Owner of the appointment, must exist and clientID match.
     * @deny (read, write) Non-owner, non-admin user.
     * @principle Enforces document ownership and administrative override.
     */
    match /appointments/{appointmentId} {
      function isOwner(clientId) {
        return request.auth != null && request.auth.uid == clientId;
      }

      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }

      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }

      //READS
      allow get: if isSignedIn() && (isOwner(resource.data.clientId) || isAdmin());
      allow list: if isSignedIn() && isAdmin(); //The error log indicates a user tried to list this. This is not a function for non-admin users.

      //WRITES
      allow create: if isSignedIn() && isOwner(request.resource.data.clientId);
      allow update: if isSignedIn() && (isExistingOwner(resource.data.clientId) || isAdmin());
      allow delete: if isSignedIn() && (isExistingOwner(resource.data.clientId) || isAdmin());
    }

    //Reusable function
    function isSignedIn() {
      return request.auth != null;
    }
  }
}