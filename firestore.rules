/**
 * @file Firestore Security Rules for GlamEase.
 *
 * @Core Philosophy: This ruleset enforces a strict user-ownership model for personal data,
 *                   while allowing public read access to service and promotion information.
 *                   Administrative override is not currently implemented.
 *
 * @Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /users/{userId}/clients/{clientId}: Stores client data, accessible only by the associated user.
 * - /services/{serviceId}: Stores service data, publicly readable.
 * - /promotions/{promotionId}: Stores promotion data, publicly readable.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment data, accessible only by the associated user.
 *
 * @Key Security Decisions:
 * - User listing is not explicitly denied, but also not granted.
 * - Public read access is granted for services and promotions.
 * - No data shape validation is performed in this prototyping phase, except for ownership checks.
 * - No admin role is implemented.
 *
 * @Denormalization for Authorization:
 *   None. Path-based ownership is used where applicable.
 *
 * @Structural Segregation:
 *   Public data (services, promotions) and private data (clients, appointments) are stored in separate collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID matching the userId in the path can create their user document.
     * @allow (get, update, delete) - Authenticated user with UID matching the userId in the path can read/update/delete their user document.
     * @deny (create) - Authenticated user tries to create a user document with a userId that doesn't match their UID.
     * @deny (update, delete) - Authenticated user tries to update/delete a user document with a userId that doesn't match their UID or if the document doesn't exist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted in this ruleset.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - Authenticated user with UID matching the userId in the path can create a client document.
     * @allow (get, list, update, delete) - Authenticated user with UID matching the userId in the path can read/list/update/delete their client documents.
     * @deny (create) - Authenticated user tries to create a client document with a userId that doesn't match their UID.
     * @deny (update, delete) - Authenticated user tries to update/delete a client document with a userId that doesn't match their UID or if the document doesn't exist.
     * @principle Restricts access to a user's own data tree, enforces document ownership for writes.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read service data, but restricts writes.
     * @path /services/{serviceId}
     * @allow (get, list) - Anyone can read service documents.
     * @deny (create, update, delete) - No one can create, update, or delete service documents.
     * @principle Public read access with owner-only writes (currently no owner).
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read promotion data, but restricts writes.
     * @path /promotions/{promotionId}
     * @allow (get, list) - Anyone can read promotion documents.
     * @deny (create, update, delete) - No one can create, update, or delete promotion documents.
     * @principle Public read access with owner-only writes (currently no owner).
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a user to manage their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - Authenticated user with UID matching the userId in the path can create an appointment document.
     * @allow (get, list, update, delete) - Authenticated user with UID matching the userId in the path can read/list/update/delete their appointment documents.
     * @deny (create) - Authenticated user tries to create an appointment document with a userId that doesn't match their UID.
     * @deny (update, delete) - Authenticated user tries to update/delete an appointment document with a userId that doesn't match their UID or if the document doesn't exist.
     * @principle Restricts access to a user's own data tree, enforces document ownership for writes.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}