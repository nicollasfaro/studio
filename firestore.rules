/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and appointments,
 *              allows public read access to services and promotions, and provides admin override capabilities.
 * @dataStructure
 *  - /users/{userId}: Stores user profile data, accessible to the user and admins.
 *  - /services/{serviceId}: Stores service information, publicly readable.
 *  - /promotions/{promotionId}: Stores promotion details, publicly readable.
 *  - /appointments/{appointmentId}: Stores appointment data, owned by clients, managed by admins.
 * @keySecurityDecisions
 *  - User listing is restricted to admins only.
 *  - All write operations on services and promotions are restricted to admins.
 *  - Appointments are stored in a top-level collection with a `clientId` for ownership checks.
 *  - Admin status is determined by the `isAdmin` field in the user's document.
 * @denormalizationForAuthorization
 *  - Appointments are stored in a top-level collection and the `clientId` is denormalized,
 *    avoiding the need to nest appointments under user profiles. This enables more efficient admin queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // üîê Global helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return request.auth.uid != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (get) If the user is signed in and is the owner of the profile or an admin.
     * @deny (get) If the user is not signed in.
     * @allow (list) If the user is an admin.
     * @deny (list) If the user is not an admin.
     * @allow (create) If the user is signed in and the user ID matches the authenticated user's ID.
     * @deny (create) If the user ID does not match the authenticated user's ID.
     * @allow (update) If the user is signed in and is the owner of the profile or an admin.  The `isAdmin` field can only be updated by an admin.
     * @deny (update) If the user attempts to modify the `isAdmin` field without admin privileges.
     * @allow (delete) If the user is signed in and is the owner of the profile or an admin.
     * @deny (delete) If the user is not the owner and not an admin.
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if (isSignedIn() && isOwner(userId) && request.resource.data.isAdmin == resource.data.isAdmin) || isAdmin();
      allow delete: if (isSignedIn() && isOwner(userId)) || isAdmin();
    }

    /**
     * @description Secures service data, allowing public reads and admin-only writes.
     * @path /services/{serviceId}
     * @allow (get) Any user can read service data.
     * @allow (list) Any user can list service data.
     * @deny (create) Only admins can create service data.
     * @deny (update) Only admins can update service data.
     * @deny (delete) Only admins can delete service data.
     * @principle Public read, admin-only write.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages promotion data, allowing public reads and admin-only writes.
     * @path /promotions/{promotionId}
     * @allow (get) Any user can read promotion data.
     * @allow (list) Any user can list promotion data.
     * @deny (create) Only admins can create promotion data.
     * @deny (update) Only admins can update promotion data.
     * @deny (delete) Only admins can delete promotion data.
     * @principle Public read, admin-only write.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to appointment data. Owners (clients) can manage their own appointments. Admins have full access.
     * @path /appointments/{appointmentId}
     * @allow (get) If the user is signed in and is the owner of the appointment or an admin.
     * @allow (list) If the user is signed in and is the owner of the appointment or an admin.
     * @allow (create) If the user is signed in and is the owner of the appointment or an admin.
     * @deny (create) If the appointment does not have a `clientId` field matching the user ID.
     * @allow (update) If the user is signed in and is the owner of the appointment or an admin, and the appointment exists.
     * @deny (update) If the appointment does not exist.
     * @allow (delete) If the user is signed in and is the owner of the appointment or an admin, and the appointment exists.
     * @deny (delete) If the appointment does not exist.
     * @principle Enforces ownership for appointments and allows admin override.
     */
    match /appointments/{appointmentId} {
      allow get, list, create: if (isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id == resource.data.clientId)) || isAdmin();
      allow update, delete: if (isExistingOwner(resource.data.clientId) || isAdmin());
    }
  }
}