/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data (users, clients, appointments) while allowing public read access to shared data (services, promotions). Admin users are able to read all user documents.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/clients/{clientId}: Client data, owned by the user.
 * - /services/{serviceId}: Service data, publicly readable.
 * - /promotions/{promotionId}: Promotion data, publicly readable.
 * - /users/{userId}/appointments/{appointmentId}: Appointment data, owned by the user.
 *
 * Key Security Decisions:
 * - User listing is denied to all users except admins.
 * - Public data (services, promotions) is readable by anyone.
 * - Write access is strictly controlled based on ownership.
 *
 * Denormalization for Authorization:
 *  - The rules rely on path-based ownership (e.g., /users/{userId}) and checking the authenticated user's UID against the path variable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && resource.data.keys().hasAll(request.resource.data.keys());
    }

    /**
     * @description Checks if the user has the admin role.
     */
    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User 'giGWF3P9E6he2DctYPXrY9Tkqpi1' can create their own document with matching ID.
     * @allow (get) User 'giGWF3P9E6he2DctYPXrY9Tkqpi1' can get their own document.
     * @deny (create) User 'giGWF3P9E6he2DctYPXrY9Tkqpi1' cannot create a document with a mismatched ID.
     * @deny (update) User 'hPG9Bf6c8MaL8Nk9y2Bf' cannot update user 'giGWF3P9E6he2DctYPXrY9Tkqpi1''s document.
     * @principle Enforces document ownership for writes, restricts listing, and validates relational integrity.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/clients/{clientId} collection.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User 'giGWF3P9E6he2DctYPXrY9Tkqpi1' can create a client document under their ID.
     * @allow (get) User 'giGWF3P9E6he2DctYPXrY9Tkqpi1' can get a client document under their ID.
     * @deny (create) User 'hPG9Bf6c8MaL8Nk9y2Bf' cannot create a client document under user 'giGWF3P9E6he2DctYPXrY9Tkqpi1'.
     * @deny (update) User 'hPG9Bf6c8MaL8Nk9y2Bf' cannot update user 'giGWF3P9E6he2DctYPXrY9Tkqpi1''s client document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /services/{serviceId} collection.
     * @path /services/{serviceId}
     * @allow (get) Any user can read service information.
     * @allow (list) Any user can list service documents.
     * @deny (create) No user can create service documents (needs backend logic).
     * @deny (update) No user can update service documents (needs backend logic).
     * @principle Allows public read access to service information.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only writes
    }

    /**
     * @description Rules for the /promotions/{promotionId} collection.
     * @path /promotions/{promotionId}
     * @allow (get) Any user can read promotion information.
     * @allow (list) Any user can list promotion documents.
     * @deny (create) No user can create promotion documents (needs backend logic).
     * @deny (update) No user can update promotion documents (needs backend logic).
     * @principle Allows public read access to promotion information.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add admin-only writes
    }

    /**
     * @description Rules for the /users/{userId}/appointments/{appointmentId} collection.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User 'giGWF3P9E6he2DctYPXrY9Tkqpi1' can create an appointment document under their ID.
     * @allow (get) User 'giGWF3P9E6he2DctYPXrY9Tkqpi1' can get an appointment document under their ID.
     * @deny (create) User 'hPG9Bf6c8MaL8Nk9y2Bf' cannot create an appointment document under user 'giGWF3P9E6he2DctYPXrY9Tkqpi1'.
     * @deny (update) User 'hPG9Bf6c8MaL8Nk9y2Bf' cannot update user 'giGWF3P9E6he2DctYPXrY9Tkqpi1''s appointment document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}