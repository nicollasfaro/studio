rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document.
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their own profile document.
     * @deny (create) User with UID 'user123' cannot create a profile document for 'user456'.
     * @deny (get, update, delete) User with UID 'user123' cannot read, update, or delete profile document for 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Allow the user to read, update, and delete their own profile.
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      // Allow a user to create their own profile if the UID matches.
      allow create: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to service data.
     * @path /services/{serviceId}
     * @allow (get, list) Any user (signed in or not) can read service information.
     * @deny (create, update, delete) No user can create, update, or delete service information (admin-only).
     * @principle Public read access with no write access.
     */
    match /services/{serviceId} {
      // Allow anyone to read service information.
      allow get, list: if true;

      // No one can create, update, or delete service information.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to promotion data.
     * @path /promotions/{promotionId}
     * @allow (get, list) Any user (signed in or not) can read promotion information.
     * @deny (create, update, delete) No user can create, update, or delete promotion information (admin-only).
     * @principle Public read access with no write access.
     */
    match /promotions/{promotionId} {
      // Allow anyone to read promotion information.
      allow get, list: if true;

      // No one can create, update, or delete promotion information.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to appointment data.
     * @path /appointments/{appointmentId}
     * @allow (create) Signed-in user can create a new appointment for themselves.
     * @allow (get, update, delete) Signed-in user can manage their own appointments.
     * @deny (create) Signed-in user cannot create appointments for other users.
     * @deny (get, update, delete) Signed-in user cannot manage appointments for other users.
     * @principle Enforces ownership of appointments via the 'clientId' field.
     */
    match /appointments/{appointmentId} {
      // Allow a user to read, update, and delete their own appointments.
      allow get, update, delete: if isSignedIn() && resource.data.clientId == request.auth.uid;

      // Allow a user to create an appointment for themselves, validating clientId on create
      allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
      allow list: if false; // Listing appointments is not permitted
    }

    /**
     * @description Controls access to theme settings.
     * @path /theme/{themeId}
     * @allow (get, list) Any user can read theme settings.
     * @deny (create, update, delete) Only admins can modify theme settings.
     * @principle Public read access with admin-only write access.
     */
    match /theme/{themeId} {
      // Allow anyone to read theme settings.
      allow get, list: if true;

      // Only admins can create, update, or delete theme settings.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to social media links.
     * @path /socialMedia/{docId}
     * @allow (get, list) Any user can read social media links.
     * @deny (create, update, delete) Only admins can modify social media links.
     * @principle Public read access with admin-only write access.
     */
    match /socialMedia/{docId} {
      // Allow anyone to read social media links.
      allow get, list: if true;

      // Only admins can create, update, or delete social media links.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to configuration settings (e.g., notification settings).
     * @path /config/{docId}
     * @deny (get, list, create, update, delete) Only admins can read or modify configuration settings.
     * @principle Admin-only access for sensitive configuration data.
     */
    match /config/{docId} {
      // Only admins can read or modify configuration settings.
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to gallery image metadata.
     * @path /galleryImages/{imageId}
     * @allow (get, list) Any user can read gallery image metadata.
     * @deny (create, update, delete) Only admins can create, update, or delete gallery image metadata.
     * @principle Public read access with admin-only write access.
     */
    match /galleryImages/{imageId} {
      // Allow anyone to read gallery image metadata.
      allow get, list: if true;

      // Only admins can create, update, or delete gallery image metadata.
      allow create, update, delete: if isAdmin();
    }
  }

  // Helper functions

  // Checks if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Checks if the user is the owner of the document based on the user ID in the path.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Checks if the user is the owner of the document based on the 'clientId' field.
  function isOwnerByClientId(clientId) {
    return request.auth.uid == clientId;
  }

  // Checks if the user is an administrator.
  // In a real application, you'd likely fetch this from the user's document.
  function isAdmin() {
    return false; // Placeholder: Implement admin check based on your data model.
  }

  // Checks if the user is the owner of the document and it exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}