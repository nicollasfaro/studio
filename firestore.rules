/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data nested under `/users/{userId}`.
 * Public data for services and promotions is accessible to all users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user and admins can read/write.
 * - /users/{userId}/clients/{clientId}: Stores client data. Only the owning user can read/write.
 * - /services/{serviceId}: Stores service data. Publicly readable.
 * - /promotions/{promotionId}: Stores promotion data. Publicly readable.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment data. Only the owning user can read/write.
 *
 * Key Security Decisions:
 * - User listing is only allowed for admin users.
 * - Read-only collections (services, promotions) are publicly readable.
 * - All write operations on user-owned data require authentication and ownership validation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines the isOwner function to check if the request is made by the owner.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @return {bool} - True if the user ID matches the authentication UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an existing owner of the document
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @return {bool} True if the user ID matches the authentication UID and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data);
    }
    
    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own user document if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can only access their own user document. Admins can also access.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user is not the owner of the document.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/clients/{clientId} collection.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - Authenticated user can create a client document under their user ID.
     * @allow (get, list, update, delete) - Authenticated user can only access their own client documents.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (get, list, update, delete) - If the user is not the owner of the document.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /services/{serviceId} collection.
     * @path /services/{serviceId}
     * @allow (get, list) - All users can read service information.
     * @deny (create, update, delete) - No user can create, update, or delete service information.
     * @principle Public read, owner-only writes with missing ownership field.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /promotions/{promotionId} collection.
     * @path /promotions/{promotionId}
     * @allow (get, list) - All users can read promotion information.
     * @deny (create, update, delete) - No user can create, update, or delete promotion information.
     * @principle Public read, owner-only writes with missing ownership field.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /users/{userId}/appointments/{appointmentId} collection.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - Authenticated user can create an appointment document under their user ID.
     * @allow (get, list, update, delete) - Authenticated user can only access their own appointment documents.
     * @deny (create) - If the userId does not match the authenticated user's ID.
     * @deny (get, list, update, delete) - If the user is not the owner of the document.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}