/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for private data and allows public read access for shared data like services and promotions.  Administrative access is not explicitly defined in the data model and will be defaulted to owner-only access for user documents in this prototype.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user.
 * - /users/{userId}/clients/{clientId}: Client data owned by a specific user.
 * - /services/{serviceId}: Publicly readable service information.
 * - /promotions/{promotionId}: Publicly readable promotion information.
 * - /users/{userId}/appointments/{appointmentId}: Appointment data owned by a specific user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and data nested under their user ID.
 * - Listing the /users collection is denied to all users in this prototype because the reasoning indicates it should only be available to admin users and the data model has no isAdmin field, so it is defaulted to most restrictive state.
 * - Services and promotions are publicly readable.
 * - All write operations require authentication (user must be signed in).
 *
 * Denormalization for Authorization:
 *  - User ownership is enforced via path-based rules (e.g., /users/{userId}/...). This avoids the need for 'get()' calls to verify ownership.
 *
 * Structural Segregation:
 * - Public (services, promotions) and private (clients, appointments) data are stored in separate collections to simplify security rules and improve query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

   /**
     * @description Denies listing of `/users` collection.
     */
    match /users {
        allow get: if false;
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own document.
     * @allow (get) User can read their own document.
     * @allow (update) User can update their own document.
     * @allow (delete) User can delete their own document.
     * @deny (create) User tries to create a document with a mismatched ID.
     * @deny (get) User tries to read another user's document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages client data for a specific user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User can create a client document under their ID.
     * @allow (get) User can read their own client documents.
     * @allow (update) User can update their own client documents.
     * @allow (delete) User can delete their own client documents.
     * @deny (create) User tries to create a client document under another user's ID.
     * @deny (get) User tries to read client documents from another user.
     * @principle Enforces document ownership and validates relational integrity.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages service data (publicly readable).
     * @path /services/{serviceId}
     * @allow (get) Any user can read service data.
     * @allow (list) Any user can list service data.
     * @deny (create) No user can create service data. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No user can update service data. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No user can delete service data. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access, restricts writes.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages promotion data (publicly readable).
     * @path /promotions/{promotionId}
     * @allow (get) Any user can read promotion data.
     * @allow (list) Any user can list promotion data.
     * @deny (create) No user can create promotion data. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No user can update promotion data. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No user can delete promotion data. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access, restricts writes.
     */
    match /promotions/{promotionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages appointment data for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User can create appointment documents under their ID.
     * @allow (get) User can read their own appointment documents.
     * @allow (update) User can update their own appointment documents.
     * @allow (delete) User can delete their own appointment documents.
     * @deny (create) User tries to create appointment documents under another user's ID.
     * @deny (get) User tries to read appointment documents from another user.
     * @principle Enforces document ownership for appointment data.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}