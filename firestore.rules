/**
 * @fileOverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client and appointment data,
 * while allowing public read access to service and promotion information.
 *
 * Data Structure:
 * - Client data is nested under /users/{userId}/clients/{clientId}.
 * - Appointment data is nested under /users/{userId}/appointments/{appointmentId}.
 * - Service data is stored in a top-level collection /services/{serviceId}.
 * - Promotion data is stored in a top-level collection /promotions/{promotionId}.
 *
 * Key Security Decisions:
 * - User listing is disallowed for clients and appointments.
 * - Service and promotion data is publicly readable but writable only via the Firebase Console.
 * - All writes must be authenticated.
 *
 * Denormalization for Authorization: N/A (Path-based ownership is used)
 * Structural Segregation: Public data (services, promotions) is stored in separate, top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures client data, ensuring only the owner can read and write.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) Signed-in user with ID matching {userId} creates a new client document.
     * @allow (get, update, delete) Signed-in user with ID matching {userId} accesses their client document.
     * @deny (create, get, update, delete) Signed-in user with ID not matching {userId} attempts to access another user's client document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/clients/{clientId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the existing resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the owner to read their client data.
      allow get: if isOwner(userId);
      // Disallow listing.
      allow list: if false;

      // Allow the owner to create their client data if the userId matches.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the owner to update their client data. Enforce immutability of id.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the owner to delete their client data.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to service data.
     * @path /services/{serviceId}
     * @allow (get, list) Any user can read service data.
     * @deny (create, update, delete) Only admins can create, update, or delete services (managed via console).
     * @principle Provides public read access to service information.
     */
    match /services/{serviceId} {
      // Allow anyone to read service data.
      allow get, list: if true;

      // Only admins can create, update, or delete services (managed via console).
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to promotion data.
     * @path /promotions/{promotionId}
     * @allow (get, list) Any user can read promotion data.
     * @deny (create, update, delete) Only admins can create, update, or delete promotions (managed via console).
     * @principle Provides public read access to promotion information.
     */
    match /promotions/{promotionId} {
      // Allow anyone to read promotion data.
      allow get, list: if true;

      // Only admins can create, update, or delete promotions (managed via console).
      allow create, update, delete: if false;
    }

    /**
     * @description Secures appointment data, ensuring only the owner can read and write.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) Signed-in user with ID matching {userId} creates a new appointment document.
     * @allow (get, update, delete) Signed-in user with ID matching {userId} accesses their appointment document.
     * @deny (create, get, update, delete) Signed-in user with ID not matching {userId} attempts to access another user's appointment document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the existing resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the owner to read their appointment data.
      allow get: if isOwner(userId);
      // Disallow listing.
      allow list: if false;

      // Allow the owner to create their appointment data if the userId matches.
      allow create: if isOwner(userId) && request.resource.data.clientId == userId;

      // Allow the owner to update their appointment data. Enforce immutability of clientId.
      allow update: if isExistingOwner(userId) && request.resource.data.clientId == resource.data.clientId;

      // Allow the owner to delete their appointment data.
      allow delete: if isExistingOwner(userId);
    }
  }
}