/**
 * @file Firestore Security Rules for GlamEase.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for client and appointment data,
 *                  while allowing public read access to service and promotion information.
 *                  All data is either stored under a user's specific path (/users/{userId}/...)
 *                  or in top-level collections for public data (/services/{serviceId}, /promotions/{promotionId}).
 * @data_structure - /users/{userId}/clients/{clientId}: Stores client profiles, accessible only to the owning user.
 *                 - /services/{serviceId}: Stores service information, publicly readable.
 *                 - /promotions/{promotionId}: Stores promotion details, publicly readable.
 *                 - /users/{userId}/appointments/{appointmentId}: Stores appointment schedules, accessible only to the owning user.
 * @key_security_decisions - Users cannot list all user documents. Only granular access to user-owned data is allowed.
 *                         - Public collections (services, promotions) are readable by all.
 *                         - All write operations require authentication.
 * @denormalization_for_authorization None needed: The path-based ownership model avoids the need for data denormalization.
 * @structural_segregation Private client and appointment data is segregated under /users/{userId},
 *                        while public service and promotion data resides in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can access their own client data.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - Authenticated user 'OpjV2mjea2VdhbQ62gN1afDFvv02' can create a client document with clientId = 'client1' under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/clients/client1
     * @allow (get) - Authenticated user 'OpjV2mjea2VdhbQ62gN1afDFvv02' can read client document with clientId = 'client1' under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/clients/client1
     * @allow (update) - Authenticated user 'OpjV2mjea2VdhbQ62gN1afDFvv02' can update client document with clientId = 'client1' under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/clients/client1
     * @allow (delete) - Authenticated user 'OpjV2mjea2VdhbQ62gN1afDFvv02' can delete client document with clientId = 'client1' under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/clients/client1
     * @deny (create) - Authenticated user 'OpjV2mjea2VdhbQ62gN1afDFvv02' cannot create a client document under /users/otherUserId/clients/client1 because userId does not match.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read service information.
     * @path /services/{serviceId}
     * @allow (get) - Any user can read service information with serviceId = 'service1' under /services/service1
     * @allow (list) - Any user can list all services.
     * @deny (create) - No one can create services without specific authorization (e.g., admin role).
     * @deny (update) - No one can update services without specific authorization.
     * @deny (delete) - No one can delete services without specific authorization.
     * @principle Grants public read access while restricting write access to authorized users.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin role validation for service creation.
      allow update: if false; // TODO: Add admin role validation for service updates.
      allow delete: if false; // TODO: Add admin role validation for service deletion.
    }

    /**
     * @description Allows anyone to read promotion information.
     * @path /promotions/{promotionId}
     * @allow (get) - Any user can read promotion information with promotionId = 'promotion1' under /promotions/promotion1
     * @allow (list) - Any user can list all promotions.
     * @deny (create) - No one can create promotions without specific authorization (e.g., admin role).
     * @deny (update) - No one can update promotions without specific authorization.
     * @deny (delete) - No one can delete promotions without specific authorization.
     * @principle Grants public read access while restricting write access to authorized users.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin role validation for promotion creation.
      allow update: if false; // TODO: Add admin role validation for promotion updates.
      allow delete: if false; // TODO: Add admin role validation for promotion deletion.
    }

    /**
     * @description Enforces that only the authenticated user can access their own appointment data.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - Authenticated user 'OpjV2mjea2VdhbQ62gN1afDFvv02' can create an appointment document with appointmentId = 'appt1' under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/appointments/appt1
     * @allow (get) - Authenticated user 'OpjV2mjea2VdhbQ62gN1afDFvv02' can read appointment document with appointmentId = 'appt1' under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/appointments/appt1
     * @allow (update) - Authenticated user 'OpjV2mjea2VdhbQ62gN1afDFvv02' can update appointment document with appointmentId = 'appt1' under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/appointments/appt1
     * @allow (delete) - Authenticated user 'OpjV2mjea2VdhbQ62gN1afDFvv02' can delete appointment document with appointmentId = 'appt1' under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/appointments/appt1
     * @deny (create) - Authenticated user 'OpjV2mjea2VdhbQ62gN1afDFvv02' cannot create an appointment document under /users/otherUserId/appointments/appt1 because userId does not match.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.clientId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.clientId == resource.data.clientId;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description  Denies listing of all users.  This prevents unauthorized access to user IDs.
      * @path /users
      * @deny list: Listing all users is prohibited.
      * @principle Prevents unauthorized enumeration of user IDs.
      */
    match /users {
        allow list: if false;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}