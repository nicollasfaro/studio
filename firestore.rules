/**
 * @file Firebase Security Rules for Thainnes Cuba Ciuldin Application
 *
 * @core_philosophy This ruleset implements a combination of ownership-based and role-based access control.
 *  User data is protected under their respective user ID, while administrative control is enforced via the `isAdmin` field.
 *  Public data (services, promotions, theme settings, and social media links) is readable by all users, with write access limited to administrators.
 *
 * @data_structure
 * - /users/{userId}: Stores individual user profiles.
 * - /services/{serviceId}: Stores service information.
 * - /promotions/{promotionId}: Stores promotion details.
 * - /appointments/{appointmentId}: Stores appointment data. Each appointment is linked to a client via the `clientId` field.
 * - /theme/{themeId}: Stores theme settings (e.g., colors).
 * - /socialMedia/{docId}: Stores social media links.
 *
 * @key_security_decisions
 * - User listing is disabled for security reasons.
 * - Data types are not strictly enforced in this prototyping phase, focusing on authorization.
 * - The rules explicitly deny any unauthorized access, ensuring a secure-by-default posture.
 * - Admins can manage any appointment. Clients can only manage their own appointments.
 *
 * @denormalization_for_authorization
 * - Appointments have a `clientId` field to enable security rules that check for ownership.
 *
 * @structural_segregation
 * - Public data (services, promotions, theme, social media) is stored in top-level collections with public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing users to manage their own data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile with matching ID in the document.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to services, but restricts write access.
     * @path /services/{serviceId}
     * @allow (get) Any user can read service information.
     * @allow (list) Any user can list service information.
     * @deny (create) Non-admin users cannot create services.
     * @deny (update) Non-admin users cannot update services.
     * @deny (delete) Non-admin users cannot delete services.
     * @principle Public read access with admin-only writes.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to promotions, but restricts write access.
     * @path /promotions/{promotionId}
     * @allow (get) Any user can read promotion information.
     * @allow (list) Any user can list promotion information.
     * @deny (create) Non-admin users cannot create promotions.
     * @deny (update) Non-admin users cannot update promotions.
     * @deny (delete) Non-admin users cannot delete promotions.
     * @principle Public read access with admin-only writes.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures appointments, allowing clients to manage their own and admins to manage all.
     * @path /appointments/{appointmentId}
     * @allow (create) User with ID 'user123' can create an appointment with clientId 'user123'.
     * @allow (get) User with ID 'user123' can read appointment with clientId 'user123'.
     * @allow (update) User with ID 'user123' can update appointment with clientId 'user123'.
     * @allow (delete) User with ID 'user123' can delete appointment with clientId 'user123'.
     * @allow (get) Admin can read any appointment.
     * @allow (list) Admin can list all appointments.
     * @deny (create) User with ID 'user456' cannot create an appointment for clientId 'user123'.
     * @deny (get) User with ID 'user456' cannot read appointment with clientId 'user123' unless admin.
     * @principle Enforces ownership for clients, and allows admin override.
     */
    match /appointments/{appointmentId} {
      allow get: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true || request.auth.uid == resource.data.clientId;
      allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true || request.auth.uid == resource.data.clientId;
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true || request.auth.uid == resource.data.clientId;
    }

    /**
     * @description Allows public read access to theme settings, but restricts write access to admins.
     * @path /theme/{themeId}
     * @allow (get) Any user can read theme settings.
     * @allow (list) Any user can list theme settings.
     * @deny (create) Non-admin users cannot create theme settings.
     * @deny (update) Non-admin users cannot update theme settings.
     * @deny (delete) Non-admin users cannot delete theme settings.
     * @principle Public read access with admin-only writes.
     */
    match /theme/{themeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Allows public read access to social media links, but restricts write access to admins.
      * @path /socialMedia/{docId}
      * @allow (get) Any user can read social media links.
      * @allow (list) Any user can list social media links.
      * @deny (create) Non-admin users cannot create social media links.
      * @deny (update) Non-admin users cannot update social media links.
      * @deny (delete) Non-admin users cannot delete social media links.
      * @principle Public read access with admin-only writes.
      */
    match /socialMedia/{docId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.id == request.auth.uid;
  }

  function isAdmin() {
    return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
  }
}