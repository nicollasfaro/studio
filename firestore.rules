/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for client and appointment data,
 * while allowing public read access to service and promotion information.
 *
 * Data Structure:
 * - Client data is nested under /users/{userId}/clients/{clientId}.
 * - Service data is stored in the /services/{serviceId} collection.
 * - Promotion data is stored in the /promotions/{promotionId} collection.
 * - Appointment data is nested under /users/{userId}/appointments/{appointmentId}.
 *
 * Key Security Decisions:
 * - Users can only access their own client and appointment data.
 * - Service and promotion data is publicly readable.
 * - Listing of the entire database, or listing of all users, is denied.
 * - The rules are designed to avoid costly `get()` calls by leveraging path-based
 *   ownership and data segregation.
 *
 * Denormalization for Authorization:
 * - No denormalization is explicitly required as ownership is enforced through
 *   path-based rules.
 *
 * Structural Segregation:
 * - Private user data (clients, appointments) is stored under the /users/{userId}
 *   path, while public data (services, promotions) is stored in top-level
 *   collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the authenticated user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the root of the database.  Listing the entire database is disallowed.
     * @path /databases/{database}/documents
     * @allow (list) N/A - listing the root is never permitted.
     * @deny (list) Any attempt to list the root.
     * @principle Prevents unauthorized data discovery.
     */
    match /{document=**} {
        allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for client documents under a user's path.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can create a client document if userId matches their auth.uid and the document's id matches the clientId.
     * @allow (get) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can get a client document if userId matches their auth.uid.
     * @allow (list) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can list client documents if userId matches their auth.uid.
     * @allow (update) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can update a client document if userId matches their auth.uid.
     * @allow (delete) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can delete a client document if userId matches their auth.uid.
     * @deny (create) User 'randomUid' cannot create a client document under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/clients/someClientId.
     * @deny (update) User 'randomUid' cannot update a client document under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/clients/someClientId.
     * @deny (delete) User 'randomUid' cannot delete a client document under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/clients/someClientId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == clientId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to service documents.
     * @path /services/{serviceId}
     * @allow (get) Any user, authenticated or not, can get a service document.
     * @allow (list) Any user, authenticated or not, can list service documents.
     * @deny (create) No one can create service documents through the client (only backend).
     * @deny (update) No one can update service documents through the client (only backend).
     * @deny (delete) No one can delete service documents through the client (only backend).
     * @principle Provides public read access while restricting write access.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to promotion documents.
     * @path /promotions/{promotionId}
     * @allow (get) Any user, authenticated or not, can get a promotion document.
     * @allow (list) Any user, authenticated or not, can list promotion documents.
     * @deny (create) No one can create promotion documents through the client (only backend).
     * @deny (update) No one can update promotion documents through the client (only backend).
     * @deny (delete) No one can delete promotion documents through the client (only backend).
     * @principle Provides public read access while restricting write access.
     */
    match /promotions/{promotionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces access control for appointment documents under a user's path.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can create an appointment document if userId matches their auth.uid and the document's id matches the appointmentId.
     * @allow (get) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can get an appointment document if userId matches their auth.uid.
     * @allow (list) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can list appointment documents if userId matches their auth.uid.
     * @allow (update) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can update an appointment document if userId matches their auth.uid.
     * @allow (delete) User 'OpjV2mjea2VdhbQ62gN1afDFvv02' can delete an appointment document if userId matches their auth.uid.
     * @deny (create) User 'randomUid' cannot create an appointment document under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/appointments/someAppointmentId.
     * @deny (update) User 'randomUid' cannot update an appointment document under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/appointments/someAppointmentId.
     * @deny (delete) User 'randomUid' cannot delete an appointment document under /users/OpjV2mjea2VdhbQ62gN1afDFvv02/appointments/someAppointmentId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == appointmentId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}