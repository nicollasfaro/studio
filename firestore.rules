rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && exists(resource);
    }

    /**
     * @description Rules for client documents under a specific user.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) - Authenticated user "user_abc" can create a client document under their own user ID.
     *  request.auth.uid: 'user_abc', request.resource.data.id: 'user_abc'
     * @allow (get, list) - Authenticated user "user_abc" can read (get, list) their own client documents.
     *  request.auth.uid: 'user_abc'
     * @allow (update, delete) - Authenticated user "user_abc" can update and delete their own client documents.
     *  request.auth.uid: 'user_abc'
     * @deny (create) - Authenticated user "user_xyz" cannot create a client document under another user's ID ("user_abc").
     *  request.auth.uid: 'user_xyz', request.resource.data.id: 'user_abc'
     * @deny (get, list, update, delete) - Authenticated user "user_xyz" cannot access client documents under another user's ID ("user_abc").
     *  request.auth.uid: 'user_xyz'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for service documents.
     * @path /services/{serviceId}
     * @allow (get, list) - Any user (authenticated or not) can read service documents.
     * @deny (create, update, delete) - No one can create, update, or delete service documents.
     * @principle Public read access with no write access.
     */
    match /services/{serviceId} {
      allow get, list: if true;

      allow create, update, delete: if false;
    }

    /**
     * @description Rules for promotion documents.
     * @path /promotions/{promotionId}
     * @allow (get, list) - Any user (authenticated or not) can read promotion documents.
     * @deny (create, update, delete) - No one can create, update, or delete promotion documents.
     * @principle Public read access with no write access.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;

      allow create, update, delete: if false;
    }

    /**
     * @description Rules for appointment documents under a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - Authenticated user "user_abc" can create an appointment document under their own user ID.
     *  request.auth.uid: 'user_abc', request.resource.data.clientId: 'user_abc'
     * @allow (get, list) - Authenticated user "user_abc" can read (get, list) their own appointment documents.
     *  request.auth.uid: 'user_abc'
     * @allow (update, delete) - Authenticated user "user_abc" can update and delete their own appointment documents.
     *  request.auth.uid: 'user_abc'
     * @deny (create) - Authenticated user "user_xyz" cannot create an appointment document under another user's ID ("user_abc").
     *  request.auth.uid: 'user_xyz', request.resource.data.clientId: 'user_abc'
     * @deny (get, list, update, delete) - Authenticated user "user_xyz" cannot access appointment documents under another user's ID ("user_abc").
     *  request.auth.uid: 'user_xyz'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}