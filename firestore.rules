/**
 * @fileoverview Firestore Security Rules for Thainnes Cuba Ciuldin application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing open access for public data (services, promotions, theme, social media links) with strict ownership and admin-controlled access for private user data and sensitive configurations.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile information.
 * - /services/{serviceId}: Stores public service information.
 * - /promotions/{promotionId}: Stores public promotion information.
 * - /appointments/{appointmentId}: Stores appointment data, with client ownership enforced via the `clientId` field.
 * - /theme/{themeId}: Stores global theme settings.
 * - /socialMedia/{docId}: Stores social media links.
 * - /config/{docId}: Stores admin configuration settings.
 *
 * Key Security Decisions:
 * - Public data (services, promotions, theme, social media links) is readable by all.
 * - User data is strictly controlled by the user and administrators.
 * - The /appointments collection centralizes appointment data for easy admin querying, but enforces ownership via the `clientId` field.
 * - The /config collection is strictly admin-only for sensitive configuration data.
 * - Listing of the `/users` collection is disallowed.
 *
 * Denormalization for Authorization:
 * - The `appointments` collection denormalizes client ownership by including a `clientId` field in each document. This avoids the need for complex `get()` calls to the `users` collection to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource, and that the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an administrator.
     */
    function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list) - Authenticated user reads their own profile.
     * @allow (update, delete) - Authenticated user updates their own profile.
     * @deny (create) - User attempts to create a profile with a different ID.
     * @principle Enforces user ownership of their profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /services/{serviceId} documents.
     * @path /services/{serviceId}
     * @allow (get, list) - Any user can read service information.
     * @allow (create, update, delete) - Only admins can modify services.
     * @deny (create, update, delete) - Non-admin users cannot modify services.
     * @principle Services are public read, admin-only write.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /promotions/{promotionId} documents.
     * @path /promotions/{promotionId}
     * @allow (get, list) - Any user can read promotion information.
     * @allow (create, update, delete) - Only admins can modify promotions.
     * @deny (create, update, delete) - Non-admin users cannot modify promotions.
     * @principle Promotions are public read, admin-only write.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /appointments/{appointmentId} documents.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - Admins can read all appointments. Users can only read their own appointments.
     * @allow (create) - Authenticated users can create appointments for themselves.
     * @allow (update, delete) - Admins can manage all appointments. Users can only modify their own appointments.
     * @deny (create) - User attempts to create an appointment for another client.
     * @principle Enforces appointment ownership and admin override.
     */
    match /appointments/{appointmentId} {
        allow get: if isAdmin() || (isSignedIn() && resource.data.clientId == request.auth.uid);
        allow list: if isAdmin(); // Admins can list all
        allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
        allow update: if isAdmin() && resource != null || (isSignedIn() && resource.data.clientId == request.auth.uid && resource != null);
        allow delete: if isAdmin() && resource != null || (isSignedIn() && resource.data.clientId == request.auth.uid && resource != null);
    }

    /**
     * @description Rules for /theme/{themeId} documents.
     * @path /theme/{themeId}
     * @allow (get, list) - Any user can read theme settings.
     * @allow (create, update, delete) - Only admins can modify theme settings.
     * @deny (create, update, delete) - Non-admin users cannot modify theme settings.
     * @principle Theme settings are public read, admin-only write.
     */
    match /theme/{themeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /socialMedia/{docId} documents.
     * @path /socialMedia/{docId}
     * @allow (get, list) - Any user can read social media links.
     * @allow (create, update, delete) - Only admins can modify social media links.
     * @deny (create, update, delete) - Non-admin users cannot modify social media links.
     * @principle Social media links are public read, admin-only write.
     */
    match /socialMedia/{docId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /config/{docId} documents.
     * @path /config/{docId}
     * @allow (get, list, create, update, delete) - Only admins can read and write config data.
     * @deny (get, list, create, update, delete) - Non-admin users cannot access config data.
     * @principle Configuration data is strictly admin-only.
     */
    match /config/{docId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}