/**
 * @description This ruleset enforces a user-ownership model for user profiles, allows public read access to services and promotions,
 *              and enforces client ownership for appointments while allowing admin override.
 * @dataStructure
 *   - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 *   - /services/{serviceId}: Stores service information, publicly readable.
 *   - /promotions/{promotionId}: Stores promotion details, publicly readable.
 *   - /appointments/{appointmentId}: Stores appointment data, owned by the client.
 * @keySecurityDecisions
 *   - Users can only read/write their own profile data.
 *   - Services and promotions are publicly readable.
 *   - Appointments are owned by the client who created them.
 *   - No user listing is allowed.
 *   - Admin users (flag on User document) are not yet supported
 * @denormalizationForAuthorization
 *   - Appointments are stored in a single collection with a `clientId` field for ownership checks, avoiding the need to nest appointments under user documents.
 * @structuralSegregation
 *   - Public data (services, promotions) is stored in top-level collections for easy listing and retrieval.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *        request.auth.uid = 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their profile.
     *        request.auth.uid = 'user123'
     * @deny (create, get, update, delete) User with ID 'user456' cannot access user 'user123' profile data.
     *        request.auth.uid = 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to service data.
     * @path /services/{serviceId}
     * @allow (get, list) All users can read service data.
     * @deny (create, update, delete) No user can create, update, or delete service data without specific authorization (e.g., admin role).
     * @principle Allows public read access while restricting write access to authorized users.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to promotion data.
     * @path /promotions/{promotionId}
     * @allow (get, list) All users can read promotion data.
     * @deny (create, update, delete) No user can create, update, or delete promotion data without specific authorization (e.g., admin role).
     * @principle Allows public read access while restricting write access to authorized users.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to appointment data.
     * @path /appointments/{appointmentId}
     * @allow (create) User with ID 'user123' can create an appointment with clientId = 'user123'.
     *        request.auth.uid = 'user123', request.resource.data.clientId = 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete an appointment if they are the client (clientId = 'user123').
     *        request.auth.uid = 'user123', resource.data.clientId = 'user123'
     * @deny (create, get, update, delete) User with ID 'user456' cannot access appointment with clientId = 'user123'.
     *        request.auth.uid = 'user456', resource.data.clientId = 'user123'
     * @principle Enforces client ownership for appointment data.
     */
    match /appointments/{appointmentId} {
      allow get: if isSignedIn() && resource.data.clientId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.clientId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.clientId == request.auth.uid && resource != null;
    }
  }
}