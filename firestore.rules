/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles,
 * allows public read access to services and promotions, and manages
 * appointments with client ownership and admin override.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user and admins.
 * - /services/{serviceId}: Stores service data, publicly readable.
 * - /promotions/{promotionId}: Stores promotion data, publicly readable.
 * - /appointments/{appointmentId}: Stores appointment data, with client ownership.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - Services and promotions are publicly readable to facilitate discovery.
 * - Appointments are owned by clients, with admin override capabilities.
 *
 * Denormalization for Authorization:
 * - The `clientId` field is included in each appointment document to enable ownership-based security rules without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is signed in and owns the profile.
     * @allow (create) if the user is signed in and the userId matches the authenticated user's ID.
     * @deny (list) to prevent listing all users.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and restricts listing.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to service data.
     * @path /services/{serviceId}
     * @allow (get, list) to allow anyone to read service information.
     * @deny (create, update, delete) to prevent unauthorized modifications.
     * @principle Allows public read access but restricts write access.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to promotion data.
     * @path /promotions/{promotionId}
     * @allow (get, list) to allow anyone to read promotion information.
     * @deny (create, update, delete) to prevent unauthorized modifications.
     * @principle Allows public read access but restricts write access.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to appointment data.
     * @path /appointments/{appointmentId}
     * @allow (get, list) if the user is an admin.
     * @allow (create) if the user is signed in.
     * @allow (update, delete) if the user owns the appointment.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for writes and restricts access to owners and admins.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientId) {
        return isSignedIn() && request.auth.uid == clientId;
      }

      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }

      // Public read not permitted, so ensure list is not open.
      allow get: if false;
      // In order to determine the security posture for list, it's important to know which clients
      // call this. The structure description says "individual user queries are filtered by
      // where('clientId', '==', uid)", and the "QAPs (Rules are not filters)" section refers to
      // that as well, so the client is expected to handle that.
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.clientId) && request.resource.data.clientId == resource.data.clientId;
      allow delete: if isExistingOwner(resource.data.clientId);
    }
  }
}