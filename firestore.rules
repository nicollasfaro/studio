/**
 * @fileoverview Firestore Security Rules for GlamEase.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for private data (clients, appointments)
 * and allows public read access for shared data (services, promotions).  Admin users
 * are granted elevated privileges on user profiles.  All write operations are
 * protected by authorization checks based on verified user identity.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.  Each user can only manage their own profile.
 * - /users/{userId}/clients/{clientId}: Stores client data. Only the owner user can access.
 * - /services/{serviceId}: Stores service data. Publicly readable.
 * - /promotions/{promotionId}: Stores promotion data. Publicly readable.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment data. Only the owner user can access.
 *
 * Key Security Decisions:
 * - Users can only create, update, and delete their own profile data.
 * - Users can only manage clients and appointments associated with their user ID.
 * - Listing all users is disallowed for non-admin users.
 * - Services and promotions are publicly readable, but write access is not granted in this prototype.
 * - All destructive operations (update, delete) require verifying the document's existence.
 *
 * Denormalization for Authorization:
 *  This ruleset uses path-based ownership (e.g. /users/{userId}/clients/{clientId}) to avoid
 *  the need for `get()` calls within the rules. The `userId` is implicitly tied to the
 *  authenticated user, making authorization checks simple and efficient.
 *
 * Structural Segregation:
 *  Publicly readable data (services, promotions) is stored in separate top-level collections
 *  to allow for simple `allow list: if true;` rules without compromising private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data. Users can only manage their own profiles. Admin users can also read and write user data.
     * @path /users/{userId}
     * @allow (create, update, delete) - User with matching UID can create, update, and delete their profile.
     * @allow (get) - Any signed-in user can get any user document.
     * @allow (list) - Only admin users can list users.
     * @deny (create, update, delete) - User attempts to modify another user's profile.
     * @principle Enforces document ownership for writes.  Restricts listing to admins.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return request.auth.token.isAdmin == true;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Secures client data under a user's profile. Only the owner user can access their own clients.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create, update, delete) - User with matching UID can manage their own clients.
     * @allow (get, list) - User with matching UID can read their own client data.
     * @deny (create, update, delete, get, list) - User attempts to access another user's clients.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId) && isSignedIn();
      allow list: if isOwner(userId) && isSignedIn();
      allow create: if isOwner(userId) && isSignedIn();
      allow update: if isOwner(userId) && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Allows public read access to service data. Write access is not granted.
     * @path /services/{serviceId}
     * @allow (get, list) - Any user can read service data.
     * @deny (create, update, delete) - No user can create, update, or delete services in this prototype.
     * @principle Allows public read access.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to promotion data. Write access is not granted.
     * @path /promotions/{promotionId}
     * @allow (get, list) - Any user can read promotion data.
     * @deny (create, update, delete) - No user can create, update, or delete promotions in this prototype.
     * @principle Allows public read access.
     */
    match /promotions/{promotionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures appointment data under a user's profile. Only the owner user can access their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create, update, delete) - User with matching UID can manage their own appointments.
     * @allow (get, list) - User with matching UID can read their own appointment data.
     * @deny (create, update, delete, get, list) - User attempts to access another user's appointments.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId) && isSignedIn();
      allow list: if isOwner(userId) && isSignedIn();
      allow create: if isOwner(userId) && isSignedIn();
      allow update: if isOwner(userId) && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn();
    }
  }
}